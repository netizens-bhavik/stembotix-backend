tags:
  - name: auth
    description: Auth API

servers:
  - url: "http://192.168.1.106:5000/api/"

paths:
  # Authentications Endpoints
  /auth/signup:
    post:
      tags:
        - auth
      summary: Register a new student user
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterUserReq"
        required: true
      responses:
        200:
          description: "Succcess Registration"
          content:
            application/json:
              schema:
                $ref: "#components/schemas/RegisterUserRes"
        500:
          description: "Server Error"
  /auth/login:
    post:
      tags:
        - auth
      summary: Logs student user into the system
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginUserReq"
        required: true
      responses:
        200:
          description: "Succcess Registration"
          content:
            application/json:
              schema:
                $ref: "#components/schemas/LoginUserRes"
        500:
          description: "Server Error"
  /auth/refresh-token:
    post:
      tags:
        - auth
      summary: Generates new Access Token for expired Login session
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RefreshTokenReq"
        required: true
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RefreshTokenRes"
        500:
          description: "Server Error"
  /auth/verify-email/{token}:
    post:
      tags:
        - auth
      parameters:
        - name: token
          in: path
          required: true
          schema:
            type: string
      summary: Verify user email account
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Email verified successfully
        500: "Server Error"
  /auth/get-user-data:
    get:
      tags:
        - auth
      summary: Get user data using Auth Bearer token
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginUserRes"
        401:
          content:
            text/plain:
              schema:
                type: string
                example: Unauthorized
# definitions
definitions:
  users:
    type: object
    required:
      - email
      - password
    properties:
      email:
        type: string
        description: user Email
      password:
        type: string
        description: user Password

components:
  schemas:
    # auth
    RegisterUserReq:
      type: object
      properties:
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: Doe
        email:
          type: string
          example: johndoe@yopmail.com
        password:
          type: string
          example: user@123
        date_of_birth:
          type: string
          example: 2000-10-10
        role:
          type: string
          example: student
    RegisterUserRes:
      type: object
      properties:
        accessToken:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImNjYWE5ODAwLTcwYzUtNDY3ZS1hODkxLWZmMmQ5M2NhMzVmNCIsImlhdCI6MTY2OTk1NDQ4NCwiZXhwIjoxNjY5OTU4MDg0fQ.U94JmI_yXISQfizFXCGYfxT0asG9nSsq8osovmanGEE
        user:
          $ref: "#/components/schemas/UserData"
        message:
          type: string
          example: Signed up successfully.
    LoginUserReq:
      type: object
      properties:
        email:
          type: string
          example: user@yopmail.com
        password:
          type: string
          example: user@123
    LoginUserRes:
      type: object
      properties:
        accessToken:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImNjYWE5ODAwLTcwYzUtNDY3ZS1hODkxLWZmMmQ5M2NhMzVmNCIsImlhdCI6MTY2OTk1NDQ4NCwiZXhwIjoxNjY5OTU4MDg0fQ.U94JmI_yXISQfizFXCGYfxT0asG9nSsq8osovmanGEE
        refreshToken:
          type: string
          example: 1e3c9a16-6580-4523-a5e7-6401dbd6abc2
        user:
          $ref: "#/components/schemas/UserData"
    RefreshTokenReq:
      type: object
      properties:
        refreshToken:
          type: string
          example: fcb50213-a89f-4e28-94d3-1adb2dbcf186
    RefreshTokenRes:
      type: object
      properties:
        accessToken:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImNjYWE5ODAwLTcwYzUtNDY3ZS1hODkxLWZmMmQ5M2NhMzVmNCIsImlhdCI6MTY2OTk1NDQ4NCwiZXhwIjoxNjY5OTU4MDg0fQ.U94JmI_yXISQfizFXCGYfxT0asG9nSsq8osovmanGEE
        refreshToken:
          type: string
          example: 1e3c9a16-6580-4523-a5e7-6401dbd6abc2
        user:
          $ref: "#/components/schemas/UserData"

    #generic
    UserData:
      type: object
      properties:
        id:
          type: string
          example: a4007575-0b46-44d1-828b-fe105194ce1f
        fullName:
          type: string
          example: John Doe
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: Doe
        email:
          type: string
          example: johndoe@yopmail.com
        isEmailVerified:
          type: boolean
          example: false
        date_of_birth:
          type: string
          example: 2000-10-10T00:00:00.000Z
        role:
          type: string
          example: student
        role_id:
          type: string
          example: e29d1afb-e3a0-41cb-a473-0549228de148
    Error400:
      type: object
      properties:
        message:
          type: string
          example: Email field is required
    Error404:
      type: object
      properties:
        message:
          type: string
          example: Requested Resource is not available
schemes:
  - http
