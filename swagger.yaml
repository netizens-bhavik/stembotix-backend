tags:
  - name: auth
    description: Auth API
  - name: courses
    description: Courses API
  - name: products
    description: Products API
servers:
  - url: 'http://192.168.1.106:5000/api/'

paths:
  # Authentications Endpoints
  /auth/signup:
    post:
      tags:
        - auth
      summary: Register a new student user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterUserReq'
        required: true
      responses:
        200:
          description: 'Succcess Registration'
          content:
            application/json:
              schema:
                $ref: '#components/schemas/RegisterUserRes'
        500:
          description: 'Server Error'
  /auth/login:
    post:
      tags:
        - auth
      summary: Logs student user into the system
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginUserReq'
        required: true
      responses:
        200:
          description: 'Succcess Registration'
          content:
            application/json:
              schema:
                $ref: '#components/schemas/LoginUserRes'
        500:
          description: 'Server Error'
  /auth/refresh-token:
    post:
      tags:
        - auth
      summary: Generates new Access Token for expired Login session
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenReq'
        required: true
      responses:
        200:
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RefreshTokenRes'
        500:
          description: 'Server Error'
  /auth/verify-email/{token}:
    post:
      tags:
        - auth
      parameters:
        - name: token
          in: path
          required: true
          schema:
            type: string
      summary: Verify user email account
      responses:
        200:
          description: 'OK'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Email verified successfully
        500: 'Server Error'
  /auth/resend-verification:
    post:
      tags:
        - auth
      summary: Resends Account verification email using Bearer Token
      responses:
        200:
          description: 'OK'
          content:
            text/plain:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Email sent successfully
        401:
          description: 'Unauthorized'
          content:
            text/plain:
              schema:
                type: string
                example: Unauthorized
        500:
          description: 'Server Error'
  /auth/get-user-data:
    get:
      tags:
        - auth
      summary: Get user data using Auth Bearer token
      responses:
        200:
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginUserRes'
        401:
          content:
            text/plain:
              schema:
                type: string
                example: Unauthorized

  # Courses Endpoints
  /courses:
    get:
      tags:
        - courses
      summary: View all courses
      parameters:
        - in: query
          name: search
          type: string
          example: Learn
        - in: query
          name: pageRecord
          type: number
          example: 5
        - in: query
          name: pageNo
          type: number
          example: 2
        - in: query
          name: sortBy
          type: string
          example: [title, price, level, language]
        - in: query
          name: order
          type: string
          example: [ASC, DESC]
      responses:
        200:
          description: 'OK'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Course'
        500:
          description: 'Server Error'
    post:
      consumes:
        - multipart/form-data
      tags:
        - courses
      summary: Add new Course
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddCourseReq'
      responses:
        200:
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddCourseRes'
        500:
          description: 'Server Error'
  /courses/list:
    get:
      tags:
        - courses
      summary: List all courses of Trainer
      parameters:
        - in: query
          name: search
          type: string
          example: Learn
        - in: query
          name: pageRecord
          type: number
          example: 5
        - in: query
          name: pageNo
          type: number
          example: 2
        - in: query
          name: sortBy
          type: string
          example: [title, price, level]
        - in: query
          name: order
          type: string
          example: [ASC, DESC]
      responses:
        200:
          description: 'OK'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Course'
        500:
          description: 'OK'

  /courses/{course_id}:
    get:
      tags:
        - courses
      parameters:
        - in: path
          name: Course ID
          type: string
          required: true
          description: Unique ID associated with a course
      summary: View details about single Course
      responses:
        200:
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'
        500:
          description: 'Server Error'
    put:
      tags:
        - courses
      parameters:
        - in: path
          name: Course ID
          type: string
          required: true
          description: Unique ID associated with a course
      summary: Edit course details
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddCourseReq'
      responses:
        200:
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EditCourseRes'
        500:
          description: 'Server Error'
    delete:
      tags:
        - courses
      parameters:
        - in: path
          name: Course ID
          type: string
          required: true
          description: Unique ID associated with a course
      summary: Remove a course only if it is unpublished
      responses:
        200:
          description: 'OK'
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: number
                    example: 1
        500:
          description: 'Server Error'
  /courses/toggle-publish/{:courseId}:
    put:
      tags:
        - courses
      summary: Toggles published status of a course
      parameters:
        - in: path
          name: Course ID
          type: string
          required: true
          description: Unique ID associated with a course
      responses:
        200:
          description: 'OK'
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: number
                    example: 1
        500:
          description: 'Server Error'

  # Product Endpoints
  /product:
    get:
      tags:
        - products
      summary: View all product
      parameters:
        - in: query
          name: search
          type: string
          example: Learn
        - in: query
          name: pageRecord
          type: number
          example: 5
        - in: query
          name: pageNo
          type: number
          example: 2
        - in: query
          name: sortBy
          type: string
          example: [title, price, level]
        - in: query
          name: order
          type: string
          example: [ASC, DESC]
      responses:
        200:
          description: 'OK'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        500:
          description: 'Server Error'
    post:
      tags:
        - products
      summary: Add new Product
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddProductReq'
      responses:
        200:
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddProductRes'
        500:
          description: 'Server Error'
  /product/list:
    get:
      tags:
        - products
      summary: View all product
      parameters:
        - in: query
          name: search
          type: string
          example: Learn
        - in: query
          name: pageRecord
          type: number
          example: 5
        - in: query
          name: pageNo
          type: number
          example: 2
        - in: query
          name: sortBy
          type: string
          example: [title, price, level]
        - in: query
          name: order
          type: string
          example: [ASC, DESC]
      responses:
        200:
          description: 'OK'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        500:
          description: 'Server Error'
  /product/{product_id}:
    get:
      tags:
        - products
      parameters:
        - in: path
          name: Product ID
          type: string
          required: true
          description: Unique ID associated with a course
      summary: View details about single Product
      responses:
        200:
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        500:
          description: 'Server Error'
    put:
      tags:
        - products
      parameters:
        - in: path
          name: Product ID
          type: string
          required: true
          description: Unique ID associated with a product
      summary: Edit product details
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddProductReq'
      responses:
        200:
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EditProductRes'
        500:
          description: 'Server Error'
    delete:
      tags:
        - products
      parameters:
        - in: path
          name: Product ID
          type: string
          required: true
          description: Unique ID associated with a product
      summary: Remove a product only if it is unpublished
      responses:
        200:
          description: 'OK'
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: number
                    example: 1
        500:
          description: 'Server Error'
  /product/toggle-publish/{:productId}:
    put:
      tags:
        - products
      summary: Toggles published status of a product
      parameters:
        - in: path
          name: Product ID
          type: string
          required: true
          description: Unique ID associated with a course
      responses:
        200:
          description: 'OK'
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: number
                    example: 1
        500:
          description: 'Server Error'
# definitions
definitions:
  users:
    type: object
    required:
      - email
      - password
    properties:
      email:
        type: string
        description: user Email
      password:
        type: string
        description: user Password

components:
  schemas:
    # auth
    RegisterUserReq:
      type: object
      properties:
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: Doe
        email:
          type: string
          example: johndoe@yopmail.com
        password:
          type: string
          example: user@123
        date_of_birth:
          type: string
          example: 2000-10-10
        role:
          type: string
          example: student
    RegisterUserRes:
      type: object
      properties:
        accessToken:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImNjYWE5ODAwLTcwYzUtNDY3ZS1hODkxLWZmMmQ5M2NhMzVmNCIsImlhdCI6MTY2OTk1NDQ4NCwiZXhwIjoxNjY5OTU4MDg0fQ.U94JmI_yXISQfizFXCGYfxT0asG9nSsq8osovmanGEE
        user:
          $ref: '#/components/schemas/UserData'
        message:
          type: string
          example: Signed up successfully.
    LoginUserReq:
      type: object
      properties:
        email:
          type: string
          example: user@yopmail.com
        password:
          type: string
          example: user@123
    LoginUserRes:
      type: object
      properties:
        accessToken:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImNjYWE5ODAwLTcwYzUtNDY3ZS1hODkxLWZmMmQ5M2NhMzVmNCIsImlhdCI6MTY2OTk1NDQ4NCwiZXhwIjoxNjY5OTU4MDg0fQ.U94JmI_yXISQfizFXCGYfxT0asG9nSsq8osovmanGEE
        refreshToken:
          type: string
          example: 1e3c9a16-6580-4523-a5e7-6401dbd6abc2
        user:
          $ref: '#/components/schemas/UserData'
    RefreshTokenReq:
      type: object
      properties:
        refreshToken:
          type: string
          example: fcb50213-a89f-4e28-94d3-1adb2dbcf186
    RefreshTokenRes:
      type: object
      properties:
        accessToken:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImNjYWE5ODAwLTcwYzUtNDY3ZS1hODkxLWZmMmQ5M2NhMzVmNCIsImlhdCI6MTY2OTk1NDQ4NCwiZXhwIjoxNjY5OTU4MDg0fQ.U94JmI_yXISQfizFXCGYfxT0asG9nSsq8osovmanGEE
        refreshToken:
          type: string
          example: 1e3c9a16-6580-4523-a5e7-6401dbd6abc2
        user:
          $ref: '#/components/schemas/UserData'
    # courses
    AddCourseReq:
      type: object
      properties:
        title:
          type: string
          example: Learn NodeJS with typescript
        level:
          type: string
          example: Beginner
        price:
          type: number
          example: 849
        language:
          type: string
          example: Hindi
        description:
          type: string
          example: Best course ever!
        thumbnail:
          type: file
          example: file
    AddCourseRes:
      type: object
      properties:
        id:
          type: string
          example: d2db6924-d326-4d43-af09-ced253109ff5
        title:
          type: string
          example: Learn NodeJS with typescript
        level:
          type: string
          example: Beginner
        price:
          type: number
          example: 849
        language:
          type: string
          example: Hindi
        description:
          type: string
          example: Best course ever!
        thumbnail:
          type: string
          example: http://192.168.1.106:5000/api/media/thumbnail/thumbnail_1670323749164.png
        status:
          type: string
          example: Drafted
        createdAt:
          type: string
          example: 2022-12-06T10:49:09.176Z
        updatedAt:
          type: string
          example: 2022-12-06T10:49:09.176Z
        deletedAt:
          type: [string, null]
          example: null
    EditCourseRes:
      type: object
      properties:
        count:
          type: number
          example: 1
        rows:
          type: array
          items:
            $ref: '#/components/schemas/AddCourseRes'
    # products
    AddProductReq:
      type: object
      properties:
        title:
          type: string
          example: DIY BOT
        price:
          type: number
          example: 899
        category:
          type: string
          example: Uncategorized
        sku:
          type: string
          example: STMBOT-001
        description:
          type: string
          example: (Sample Product Description) – Try to put as much as info like features and wow factors.
        thumbnail:
          type: file
          example: file
        weight:
          type: string
          example: 1 kg
        dimension:
          type: string
          example: 12 × 10 × 20 cm
    AddProductRes:
      type: object
      properties:
        id:
          type: string
          example: 2e8bd131-eb6a-4753-91b7-e7a61e43ab94
        title:
          type: string
          example: DIY BOT
        price:
          type: number
          example: 899
        category:
          type: string
          example: Uncategorized
        sku:
          type: string
          example: STMBOT-001
        description:
          type: string
          example: (Sample Product Description) – Try to put as much as info like features and wow factors.
        thumbnail:
          type: string
          example: http://192.168.1.14:5000/media/productImg/productImg_1670406128427.png
        weight:
          type: string
          example: 1 kg
        dimension:
          type: string
          example: 12 × 10 × 20 cm
    EditProductRes:
      type: object
      properties:
        count:
          type: number
          example: 1
        rows:
          type: array
          items:
            $ref: '#/components/schemas/AddCourseRes'
    #generic
    Course:
      type: object
      properties:
        id:
          type: string
          example: 2e8bd131-eb6a-4753-91b7-e7a61e43ab94
        title:
          type: string
          example: Learn ReactTs
        price:
          type: number
          example: 899
        level:
          type: string
          example: Begginer
        language:
          type: string
          example: English
        status:
          type: string
          example: Drafted
        description:
          type: string
          example: It covers all features from latest React Technology
        thumbnail:
          type: string
          example: http://192.168.1.106:5000/media/thumbnail/thumbnail_1670323749164.png
        createdAt:
          type: string
          example: 2022-12-06T07:51:52.765Z
        updatedAt:
          type: string
          example: 2022-12-06T07:51:52.765Z
        deletedAt:
          type: [string, null]
          example: null
        Trainers:
          type: array
          items:
            $ref: '#/components/schemas/Trainer'
    Trainer:
      type: object
      properties:
        trainer_id:
          type: string
          example: ba05400d-fc39-4789-bbb0-dd46287a9953
        user_id:
          type: string
          example: a4007575-0b46-44d1-828b-fe105194ce1f
        createAt:
          type: string
          example: 2022-12-05T07:46:25.751Z
        updatedAt:
          type: string
          example: 2022-12-05T07:46:25.751Z
        deletedAt:
          type: [string | null]
          example: null
        User:
          $ref: '#/components/schemas/UserData'
    Product:
      type: object
      properties:
        id:
          type: string
          example: 54ea619b-21d7-40bb-bfc9-069aab53ab85
        title:
          type: string
          example: DIY BOT
        price:
          type: number
          example: 899
        category:
          type: string
          example: Uncategorized
        sku:
          type: string
          example: STMBOT-001
        description:
          type: string
          example: (Sample Product Description) – Try to put as much as info like features and wow factors.
        thumbnail:
          type: string
          example: http://192.168.1.14:5000/media/productImg/productImg_1670406128427.png
        weight:
          type: string
          example: 1 kg
        dimension:
          type: string
          example: 12 × 10 × 20 cm
        Users:
          type: array
          items:
            $ref: '#/components/schemas/UserData'
        ProductDimensionMap:
          $ref: '#/components/schemas/ProductDimensionMapData'
    ProductDimensionMapData:
      type: object
      properties:
        id:
          type: string
          example: 0d6391a6-8928-4965-a3f6-156899119f95
        weight:
          type: string
          example: 1 kg
        dimension:
          type: string
          example: 1 x 1 cm
        createdAt:
          type: string
          example: 2022-12-06T10:49:09.176Z
        updatedAt:
          type: string
          example: 2022-12-06T10:49:09.176Z
        deletedAt:
          type: string
          example: NULL
        product_id:
          type: string
          example: 6faf1d08-ecd2-4d3e-bd8a-ebb87391f220

    UserData:
      type: object
      properties:
        id:
          type: string
          example: a4007575-0b46-44d1-828b-fe105194ce1f
        fullName:
          type: string
          example: John Doe
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: Doe
        email:
          type: string
          example: johndoe@yopmail.com
        isEmailVerified:
          type: boolean
          example: false
        date_of_birth:
          type: string
          example: 2000-10-10T00:00:00.000Z
        role:
          type: string
          example: student
        role_id:
          type: string
          example: e29d1afb-e3a0-41cb-a473-0549228de148
        ProductUser:
          $ref: '#/components/schemas/ProductUser'
    ProductUser:
      type: object
      properties:
        createdAt:
          type: string
          example: 2022-12-06T10:49:09.176Z
        updatedAt:
          type: string
          example: 2022-12-06T10:49:09.176Z
        product_id:
          type: string
          example: 6faf1d08-ecd2-4d3e-bd8a-ebb87391f220
        userId:
          type: string
          example: 04e1c75c-b239-4d45-b129-1b8136f4b184
    Error400:
      type: object
      properties:
        message:
          type: string
          example: Email field is required
    Error404:
      type: object
      properties:
        message:
          type: string
          example: Requested Resource is not available
schemes:
  - http
