tags:
  - name: auth
    description: Auth API
  - name: courses
    description: Courses API
  - name: courses curriculum
    description: Curriculum API
  - name: course curriculum tutorials
    description: Curriculum API
  - name: products
    description: Products API
  - name: cart
    description: Handle cart and cartitems of User
  - name: order
    description: Order items
  - name: quiz
    description: Quiz API
  - name: comment
    description: Comment API
  - name: reply
    description: Reply API
  - name: LikeDislikes
    description: LikeDislikes API
  - name: livestream
    description: livestream API
  - name: leaveType
    description: leaveType API
  - name: instructorLeaves
    description: instructorLeaves API
  - name: leave
    description: leave API
  - name: holidayList
    description: holidayList API
  - name: holiday
    description: holiday API

servers:
  - url: 'http://192.168.1.106:5000/api/'

paths:
  # Authentications Endpoints
  /auth/signup:
    post:
      tags:
        - auth
      summary: Register a new student user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterUserReq'
        required: true
      responses:
        200:
          description: 'Succcess Registration'
          content:
            application/json:
              schema:
                $ref: '#components/schemas/RegisterUserRes'
        500:
          description: 'Server Error'
  /auth/login:
    post:
      tags:
        - auth
      summary: Logs student user into the system
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginUserReq'
        required: true
      responses:
        200:
          description: 'Succcess Registration'
          content:
            application/json:
              schema:
                $ref: '#components/schemas/LoginUserRes'
        500:
          description: 'Server Error'
  /auth/refresh-token:
    post:
      tags:
        - auth
      summary: Generates new Access Token for expired Login session
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenReq'
        required: true
      responses:
        200:
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RefreshTokenRes'
        500:
          description: 'Server Error'
  /auth/verify-email/{token}:
    post:
      tags:
        - auth
      parameters:
        - name: token
          in: path
          required: true
          schema:
            type: string
      summary: Verify user email account
      responses:
        200:
          description: 'OK'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Email verified successfully
        500: 'Server Error'
  /auth/resend-verification:
    post:
      tags:
        - auth
      summary: Resends Account verification email using Bearer Token
      responses:
        200:
          description: 'OK'
          content:
            text/plain:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Email sent successfully
        401:
          description: 'Unauthorized'
          content:
            text/plain:
              schema:
                type: string
                example: Unauthorized
        500:
          description: 'Server Error'
  /auth/get-user-data:
    get:
      tags:
        - auth
      summary: Get user data using Auth Bearer token
      responses:
        200:
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginUserRes'
        401:
          content:
            text/plain:
              schema:
                type: string
                example: Unauthorized
  /auth/forgot-password:
    post:
      tags:
        - auth
      summary: Sends Email for reset password
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: trainer@yopmail.com
      responses:
        200:
          description: 'OK'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Reset password mail sent successfully.
        500:
          description: 'Server Error'
  /auth/verify-reset-token/{:token}:
    post:
      tags:
        - auth
      summary: Verifies the validity of reset password token
      parameters:
        - in: path
          name: token
          type: string
          required: true
      responses:
        200:
          description: 'OK'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Valid Token
        500:
          description: 'Server Error'
  /auth/reset-password:
    post:
      tags:
        - auth
      summary: Resets Password
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  example: 795445021885eb906f1142dab3a9aec86fc8f8a1
                newPassword:
                  type: string
                  example: 8eyCc859
                confirmPassword:
                  type: string
                  example: 8eyCc859

      responses:
        200:
          description: 'OK'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Password reset successfully.

        500:
          description: 'Server Error'
  # Courses Endpoints
  /courses:
    get:
      tags:
        - courses
      summary: View all courses
      parameters:
        - in: query
          name: search
          type: string
          example: Learn
        - in: query
          name: pageRecord
          type: number
          example: 5
        - in: query
          name: pageNo
          type: number
          example: 2
        - in: query
          name: sortBy
          type: string
          example: [title, price, level, language]
        - in: query
          name: order
          type: string
          example: [ASC, DESC]
      responses:
        200:
          description: 'OK'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Course'
        500:
          description: 'Server Error'
    post:
      consumes:
        - multipart/form-data
      tags:
        - courses
      summary: Add new Course
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddCourseReq'
      responses:
        200:
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddCourseRes'
        500:
          description: 'Server Error'
  /courses/list:
    get:
      tags:
        - courses
      summary: List all courses of Trainer
      parameters:
        - in: query
          name: search
          type: string
          example: Learn
        - in: query
          name: pageRecord
          type: number
          example: 5
        - in: query
          name: pageNo
          type: number
          example: 2
        - in: query
          name: sortBy
          type: string
          example: [title, price, level]
        - in: query
          name: order
          type: string
          example: [ASC, DESC]
      responses:
        200:
          description: 'OK'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Course'
        500:
          description: 'OK'

  /courses/{course_id}:
    get:
      tags:
        - courses
      parameters:
        - in: path
          name: Course ID
          type: string
          required: true
          description: Unique ID associated with a course
      summary: View details about single Course
      responses:
        200:
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'
        500:
          description: 'Server Error'
    put:
      tags:
        - courses
      parameters:
        - in: path
          name: Course ID
          type: string
          required: true
          description: Unique ID associated with a course
      summary: Edit course details
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddCourseReq'
      responses:
        200:
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EditCourseRes'
        500:
          description: 'Server Error'
    delete:
      tags:
        - courses
      parameters:
        - in: path
          name: Course ID
          type: string
          required: true
          description: Unique ID associated with a course
      summary: Remove a course only if it is unpublished
      responses:
        200:
          description: 'OK'
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: number
                    example: 1
        500:
          description: 'Server Error'
  /courses/toggle-publish/{:courseId}:
    put:
      tags:
        - courses
      summary: Toggles published status of a course
      parameters:
        - in: path
          name: Course ID
          type: string
          required: true
          description: Unique ID associated with a course
      responses:
        200:
          description: 'OK'
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: number
                    example: 1
        500:
          description: 'Server Error'
  # Courses Curriculum
  /courses/{course_id}/section:
    get:
      tags:
        - courses curriculum
      parameters:
        - in: path
          name: Course ID
          type: string
          required: true
          description: Unique ID associated with a course
      summary: View details about curriculum section
      responses:
        200:
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Section'
        500:
          description: 'Server Error'
  /courses/section:
    post:
      tags:
        - courses curriculum
      summary: Add new curriculum section
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddSectionReq'
      responses:
        200:
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddSectionRes'
        500:
          description: 'Server Error'
  /courses/section/{curriculum_id}:
    put:
      tags:
        - courses curriculum
      parameters:
        - in: path
          name: Curriculum ID
          type: string
          required: true
          description: Unique ID associated with a curriculum
      summary: Edit curriculum section
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditSectionReq'
      responses:
        200:
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EditSectionRes'
        500:
          description: 'Server Error'
    delete:
      tags:
        - courses curriculum
      parameters:
        - in: path
          name: Curriculum ID
          type: string
          required: true
          description: Unique ID associated with a section
      summary: Removes a curriculum section
      responses:
        200:
          description: 'OK'
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: number
                    example: 1
        500:
          description: 'Server Error'
  # Curriculum Tutorials
  /courses/section/video:
    get:
      tags:
        - course curriculum tutorials
      summary: View details about curriculum section tutorials
      responses:
        200:
          description: 'OK'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CurriCulumVideosData'
        500:
          description: 'Server Error'
  /courses/section/{curriculum_id}/video:
    post:
      tags:
        - course curriculum tutorials
      parameters:
        - in: path
          name: Curriculum ID
          type: string
          required: true
          description: Unique ID associated with a curriculum
      summary: Add new tutorials to curriculum
      requestBody:
        content:
          application/json:
            schema:

      responses:
        200:
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddTutorialRes'
        500:
          description: 'Server Error'
  /courses/section/video/{video_id}:
    put:
      tags:
        - course curriculum tutorials
      parameters:
        - in: path
          name: Tutorial video ID
          type: string
          required: true
          description: Unique ID associated with a curriculum
      summary: Edit curriculum tutorial video
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddTutorialReq'
      responses:
        200:
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EditTutorialRes'
        500:
          description: 'Server Error'
    delete:
      tags:
        - course curriculum tutorials
      parameters:
        - in: path
          name: Tutorial video ID
          type: string
          required: true
          description: Unique ID associated with a curriculum
      summary: Delete curriculum tutorial video
      responses:
        200:
          description: 'OK'
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: number
                    example: 1
        500:
          description: 'Server Error'
  # Product Endpoints
  /product:
    get:
      tags:
        - products
      summary: View all product
      parameters:
        - in: query
          name: search
          type: string
          example: Learn
        - in: query
          name: pageRecord
          type: number
          example: 5
        - in: query
          name: pageNo
          type: number
          example: 2
        - in: query
          name: sortBy
          type: string
          example: [title, price, level]
        - in: query
          name: order
          type: string
          example: [ASC, DESC]
      responses:
        200:
          description: 'OK'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        500:
          description: 'Server Error'
    post:
      tags:
        - products
      summary: Add new Product
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddProductReq'
      responses:
        200:
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddProductRes'
        500:
          description: 'Server Error'
  /product/list:
    get:
      tags:
        - products
      summary: View all product
      parameters:
        - in: query
          name: search
          type: string
          example: Learn
        - in: query
          name: pageRecord
          type: number
          example: 5
        - in: query
          name: pageNo
          type: number
          example: 2
        - in: query
          name: sortBy
          type: string
          example: [title, price]
        - in: query
          name: order
          type: string
          example: [ASC, DESC]
      responses:
        200:
          description: 'OK'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        500:
          description: 'Server Error'
  /product/{product_id}:
    get:
      tags:
        - products
      parameters:
        - in: path
          name: Product ID
          type: string
          required: true
          description: Unique ID associated with a course
      summary: View details about single Product
      responses:
        200:
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        500:
          description: 'Server Error'
    put:
      tags:
        - products
      parameters:
        - in: path
          name: Product ID
          type: string
          required: true
          description: Unique ID associated with a product
      summary: Edit product details
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddProductReq'
      responses:
        200:
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EditProductRes'
        500:
          description: 'Server Error'
    delete:
      tags:
        - products
      parameters:
        - in: path
          name: Product ID
          type: string
          required: true
          description: Unique ID associated with a product
      summary: Remove a product only if it is unpublished
      responses:
        200:
          description: 'OK'
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: number
                    example: 1
        500:
          description: 'Server Error'
  /product/toggle-publish/{:productId}:
    put:
      tags:
        - products
      summary: Toggles published status of a product
      parameters:
        - in: path
          name: Product ID
          type: string
          required: true
          description: Unique ID associated with a course
      responses:
        200:
          description: 'OK'
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: number
                    example: 1
        500:
          description: 'Server Error'
  # Cart Endpoints
  /cart:
    get:
      tags:
        - cart
      summary: View User's cart
      responses:
        200:
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
        500:
          description: 'Server Error'
    delete:
      tags:
        - cart
      summary: Clears out entire cart
      responses:
        200:
          description: 'OK'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Cart cleared successfully
        500:
          description: 'Server Error'
  /cart/add-product:
    post:
      tags:
        - cart
      summary: Adds a product to cart
      responses:
        200:
          description: 'OK'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Product added to cart successfully.
                  data:
                    $ref: '#/components/schemas/CartItemShort'
        500:
          description: 'Server Error'
  /cart/add-course:
    post:
      tags:
        - cart
      summary: Adds a course to cart
      responses:
        200:
          description: 'OK'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Course added to cart successfully.
                  data:
                    $ref: '#/components/schemas/CartItemShort'
        500:
          description: 'Server Error'
  /cart/quantity:
    put:
      tags:
        - cart
      summary: Increase or Decrease Cart Item Quantity
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                cartItemId:
                  type: string
                  example: 9557f1f7-2a0e-4a42-a799-15005a57bb4b
                operation:
                  anyOf:
                    - type: string
                      example: INC
                    - type: string
                      example: DEC
      responses:
        200:
          description: 'OK'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    anyOf:
                      - type: string
                        example: Cart Item quantity increased successfully.
                      - type: string
                        example: Cart Item quantity decreased successfully.
        500:
          description: 'Server Error'
  /cart/{:cartItemId}:
    delete:
      tags:
        - cart
      summary: Remove single Cart Item
      parameters:
        - in: path
          name: cartItemId
          type: string
          required: true
          description: Unique ID associated with a course
      responses:
        200:
          description: 'OK'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Cart Item removed successfully.
        500:
          description: 'Server Error'

  # Order Endpoints
  /order:
    get:
      tags:
        - order
      summary: View all order
      responses:
        200:
          description: 'OK'
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  $ref: '#/components/schemas/orderlistRes'
        500:
          description: 'Server Error'
    post:
      tags:
        - order
      summary: Order successfully
      requestBody:
        description: Create order
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ordersReq'

      responses:
        200:
          description: 'OK'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Order Successfully.
                  data:
                    $ref: '#/components/schemas/ordersRes'
        500:
          description: 'Server Error'
  # Order verify Endpoints
  /order/verify:
    post:
      tags:
        - order
      summary: Order verify
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/orderverifyReq'
      responses:
        200:
          description: 'OK'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Order verified Successfully.
                  data:
                    $ref: '#/components/schemas/orderverifyRes'
        500:
          description: 'Server Error'
  # Quiz Endpoint
  /quiz:
    post:
      tags:
        - quiz
      summary: Add quiz
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/quiztitleReq'

      responses:
        200:
          description: 'OK'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Quiz Added Successfully.
                  data:
                    $ref: '#/components/schemas/quiztitleRes'
        500:
          description: 'Server Error'
    get:
      tags:
        - quiz
      summary: View all Quiz
      responses:
        200:
          description: 'OK'
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalCount:
                    type: number
                    example: 1
                  records:
                    type: array
                    items:
                      type: object
                      $ref: '#/components/schemas/quizlistRes'
        500:
          description: 'Server Error'
  /quiz/{quizId}:
    put:
      tags:
        - quiz
      summary: Update quiz
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateQuiztitleReq'

      responses:
        200:
          description: 'OK'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Quiz Added Successfully.
                  data:
                    $ref: '#/components/schemas/updateQuizRes'
        500:
          description: 'Server Error'
    delete:
      tags:
        - quiz
      parameters:
        - in: path
          name: Quiz ID
          type: string
          required: true
          description: Unique ID associated with a quiz
      summary: Remove quiz
      responses:
        200:
          description: 'OK'
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: number
                    example: 1
        500:
          description: 'Server Error'
  /get/quiz:
    get:
      tags:
        - quiz question and answers
      summary: View Quiz by user
      responses:
        200:
          description: 'OK'
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalCount:
                    type: number
                    example: 1
                  records:
                    type: array
                    items:
                      type: object
                      $ref: '#/components/schemas/getquizRes'
  /getAll/quiz:
    get:
      tags:
        - quiz question and answers
      summary: View all Quiz
      responses:
        200:
          description: 'OK'
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalCount:
                    type: number
                    example: 1
                  records:
                    type: array
                    items:
                      type: object
                      $ref: '#/components/schemas/getallquizRes'
  /get/admin:
    get:
      tags:
        - quiz question and answers
      summary: View Quiz by admin
      responses:
        200:
          description: 'OK'
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalCount:
                    type: number
                    example: 1
                  records:
                    type: array
                    items:
                      type: object
                      $ref: '#/components/schemas/quizlistadminRes'

  /comment:
    get:
      tags:
        - comment
      summary: View all comment
      responses:
        200:
          description: 'OK'
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalCount:
                    type: number
                    example: 1
                  records:
                    type: array
                    items:
                      type: object
                      $ref: '#/components/schemas/commentlistRes'
        500:
          description: 'Server Error'
  /comment/{courseId}:
    post:
      tags:
        - comment
      parameters:
        - in: path
          name: Course ID
          type: string
          required: true
          description: Unique ID associated with a course
      summary: Add comment
      requestBody:
        content:
          application/json:
            schema:
              type: object
              $ref: '#/components/schemas/commentReq'
      responses:
        200:
          description: 'OK'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Comment Added Successfully.
                  data:
                    type: object
                    $ref: '#/components/schemas/commentRes'
        500:
          description: 'Server Error'
  /comment/{commentId}:
    put:
      tags:
        - comment
      parameters:
        - in: path
          name: Comment ID
          type: string
          required: true
          description: Unique ID associated with a comment
      summary: Update comment
      requestBody:
        content:
          application/json:
            schema:
              type: object
              $ref: '#/components/schemas/updatecommentReq'
      responses:
        200:
          description: 'OK'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Comment Updated Successfully.
                  response:
                    type: object
                    $ref: '#/components/schemas/updatecommentRes'
        500:
          description: 'Server Error'
    delete:
      tags:
        - comment
      parameters:
        - in: path
          name: Comment ID
          type: string
          required: true
          description: Unique ID associated with a comment
      summary: Remove comment
      responses:
        200:
          description: 'OK'
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: number
                    example: 1
        500:
          description: 'Server Error'

  /courses/{courseId}/comment:
    get:
      tags:
        - comment
      parameters:
        - in: path
          name: Course ID
          type: string
          required: true
          description: Unique ID associated with a course
      summary: View comment by course
      responses:
        200:
          description: 'OK'
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalCount:
                    type: number
                    example: 1
                  records:
                    type: array
                    items:
                      type: object
                      $ref: '#/components/schemas/commentFullRes'
        500:
          description: 'Server Error'
  /admin/course/{courseId}/comment:
    get:
      tags:
        - comment
      parameters:
        - in: path
          name: Course ID
          type: string
          required: true
          description: Unique ID associated with a course
        - in: query
          name: search
          type: string
          example: Learn
        - in: query
          name: pageRecord
          type: number
          example: 5
        - in: query
          name: pageNo
          type: number
          example: 2
        - in: query
          name: sortBy
          type: string
          example: [title, price, level]
        - in: query
          name: order
          type: string
          example: [ASC, DESC]
      summary: View comment by course
      responses:
        200:
          description: 'OK'
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalCount:
                    type: number
                    example: 1
                  records:
                    type: array
                    items:
                      type: object
                      $ref: '#/components/schemas/commentFullRes'
        500:
          description: 'Server Error'
  /reply:
    get:
      tags:
        - reply
      summary: View all reply
      responses:
        200:
          description: 'OK'
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalCount:
                    type: number
                    example: 1
                  records:
                    type: array
                    items:
                      type: object
                      $ref: '#/components/schemas/replylistRes'
        500:
          description: 'Server Error'
  /reply/{commentId}:
    get:
      tags:
        - reply
      parameters:
        - in: path
          name: Comment ID
          type: string
          required: true
          description: Unique ID associated with a comment
      summary: View reply by comment
      responses:
        200:
          description: 'OK'
          content:
            application/json:
              schema:
                type: object
                properties:
                  # totalCount:
                  #   type: number
                  #   example: 1
                  records:
                    type: array
                    items:
                      type: object
                      $ref: '#/components/schemas/replylistRes'
        500:
          description: 'Server Error'
    post:
      tags:
        - reply
      parameters:
        - in: path
          name: Comment ID
          type: string
          required: true
          description: Unique ID associated with a comment
      summary: Add reply
      requestBody:
        content:
          application/json:
            schema:
              type: object
              $ref: '#/components/schemas/replyReq'
      responses:
        200:
          description: 'OK'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Reply Added Successfully.
                  response:
                    type: object
                    $ref: '#/components/schemas/replyRes'
        500:
          description: 'Server Error'
    put:
      tags:
        - reply
      parameters:
        - in: path
          name: Comment ID
          type: string
          required: true
          description: Unique ID associated with a comment
      summary: Update reply
      requestBody:
        content:
          application/json:
            schema:
              type: object
              $ref: '#/components/schemas/updatereplyReq'
      responses:
        200:
          description: 'OK'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Reply Updated Successfully.
                  response:
                    type: object
                    $ref: '#/components/schemas/updatereplyRes'
        500:
          description: 'Server Error'

    delete:
      tags:
        - reply
      parameters:
        - in: path
          name: Comment ID
          type: string
          required: true
          description: Unique ID associated with a comment
      summary: Remove reply
      responses:
        200:
          description: 'OK'
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: number
                    example: 1
        500:
          description: 'Server Error'
  
  /likedislike/{commentId}:
    post:
      tags:
        - LikeDislikes
      parameters:
        - in: path
          name: Comment ID
          type: string
          required: true
          description: Unique ID associated with a comment
      summary: Add like dislike
      responses:
        200:
          description: 'OK'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Like/Dislike Successfully.
                  response:
                    type: object
                    $ref: '#/components/schemas/likedislikeRes'
        500:
          description: 'Server Error'

  /likedislike/{commentId}/like:
    get:
      tags:
        - LikeDislikes
      parameters:
        - in: path
          name: Comment ID
          type: string
          required: true
          description: Unique ID associated with a comment
      summary: View like by comment
      responses:
        200:
          description: 'OK'
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalCount:
                    type: number
                    example: 1
                  records:
                    type: array
                    items:
                      type: object
                      $ref: '#/components/schemas/likedislikeRes'
        500:
          description: 'Server Error'
  /likedislike/reply/{replyId}/like:
   get:
      tags:
        - LikeDislikes
      parameters:
        - in: path
          name: Reply ID
          type: string
          required: true
          description: Unique ID associated with a reply
      summary: View like by reply
      responses:
        200:
          description: 'OK'
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalCount:
                    type: number
                    example: 1
                  records:
                    type: array
                    items:
                      type: object
                      $ref: '#/components/schemas/likedislikeRes'
        500:
          description: 'Server Error'
  /likedislike/reply/{replyId}:
    post:
      tags:
        - LikeDislikes
      parameters:
        - in: path
          name: Reply ID
          type: string
          required: true
          description: Unique ID associated with a reply
      summary: Add like dislike
      responses:
        200:
          description: 'OK'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Like/Dislike Successfully.
                  response:
                    type: object
                    $ref: '#/components/schemas/likedislikeRes'
        500:
          description: 'Server Error'

  /livestream:
    post:
      tags:
         - livestream
      summary: Add/create livestream/event
      requestBody:
        content:
          application/json:
            schema:
              type: object
              $ref: '#/components/schemas/addLiveStreamReq'
      responses:
        200:
          description: 'OK'
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/addLiveStreamRes'
                    
        500:
          description: 'Server Error'
  /livestream/{livestreamId}:
    put:
      tags:
        - livestream
      summary: Update livestream/event
      parameters:
        - in: path
          name: livestream/event ID
          type: string
          required: true
          description: Unique ID associated with a livestream/event
      requestBody:
        content:
          application/json:
            schema:
              type: object
              $ref: '#/components/schemas/addLiveStreamReq'
      responses:
        200:
          description: 'OK'
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: number
                    example: 1
                  rows:
                    type: array
                    items:
                      $ref: '#/components/schemas/addLiveStreamRes'
                    
        500:
          description: 'Server Error'
    delete:
      tags:
        - livestream
      summary: Delete livestream/event
      parameters:
        - in: path
          name: livestream/event ID
          type: string
          required: true
          description: Unique ID associated with a livestream/event
      responses:
        200:
          description: 'OK'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Event has been deleted        
        500:
          description: 'Server Error'
  /subscribe/{livestreamId}:
    post:
      tags:
          - livestream
      summary: Subscribe livestream/event
      parameters:
        - in: path
          name: livestream/event ID
          type: string
          required: true
          description: Unique ID associated with a livestream/event
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                subscriptionPrice:
                  type: number
                  example: 499
      responses:
        200:
          description: 'OK'
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/subscribeLiveStreamRes'
        500:
          description: 'Server Error'
    get: 
      tags:
          - livestream
      summary: Get subscription details
      parameters:
        - in: path
          name: livestream/event ID
          type: string
          required: true
          description: Unique ID associated with a livestream/event
      responses:
        200:
          description: 'OK'
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  $ref: '#/components/schemas/subscribeLiveStreamRes'
        500:
          description: 'Server Error'

  /subscribe/verify/{livestreamId}:
    post:
      tags:
          - livestream
      summary: Subscribe Verify livestream/event
      parameters:
        - in: path
          name: livestream/event ID
          type: string
          required: true
          description: Unique ID associated with a livestream/event
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                razorpayOrderId:
                  type: string
                  example: order_LJ6Nf7zkEAnEy8
                payment_id: 
                  type: string
                  example: pay_LJ6Nf7zkEAnEy8
                razorpay_signature:
                  type: string
                  example: 1a2b3c4d5e6f7g8h9i0j1k2l3m4n5o6p7q8r9s0t1u2v3w4x5y6z7a8b9c0d1e2f3g4h5i6j7k8l9m0n1o2p3q4r5s6t7u8v9w0x1y2z3
      responses:
        200:
          description: 'OK'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Payment has been done successfully
        500:
          description: 'Server Error'
  /admin/livestream/user/{livestreamId}:
    get: 
      tags:
        - livestream
      summary: Get all subscribed user
      parameters:
        - in: path
          name: livestream/event ID
          type: string
          required: true
          description: Unique ID associated with a livestream/event
        - in: query
          name: search
          type: string
          example: Learn
        - in: query
          name: pageRecord
          type: number
          example: 5
        - in: query
          name: pageNo
          type: number
          example: 2
        - in: query
          name: sortBy
          type: string
          example: [title, price, level]
        - in: query
          name: order
          type: string
          example: [ASC, DESC]
      responses:
        200:
          description: 'OK'
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalCount:
                    type: number
                    example: 1
                  records:
                    type: array
                    items:
                      $ref: '#/components/schemas/getAllSubscribedUserRes'
        500:
          description: 'Server Error'
  /admin/livestream/user/{livestreamChatLogId}:
    delete:
      tags:
        - livestream
      summary: Delete all subscribed user
      parameters:
        - in: path
          name: livestreamChatLogId
          type: string
          required: true
          description: Unique ID associated with a livestreamChatLogId
      responses:
        200:
          description: 'OK'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: All subscribed user has been deleted
        500:
          description: 'Server Error'

  /admin/leave-type:
    get:
      tags:
        - leaveType
      summary: Get all leave type
      parameters:
        - in: query
          name: search
          type: string
          example: Learn
        - in: query
          name: pageRecord
          type: number
          example: 5
        - in: query
          name: pageNo
          type: number
          example: 2
        - in: query
          name: sortBy
          type: string
          example: [title, price, level]
        - in: query
          name: order
          type: string
          example: [ASC, DESC]
      responses:
        200:
          description: 'OK'
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalCount:
                    type: number
                    example: 1
                  records:
                    type: array
                    items:
                      $ref: '#/components/schemas/leaveTypeRes'
        500:
          description: 'Server Error'
    post:
      tags:
        - leaveType
      summary: Create leave type
      requestBody:
        content:
          application/json:
            schema:
              type: object
              $ref: '#/components/schemas/leaveTypeReq'
      responses:
        200:
          description: 'OK'
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/leaveTypeRes'
        500:
          description: 'Server Error'

  /admin/leave-type/{leaveTypeId}:
    put:
      tags:
        - leaveType
      summary: Update leave type
      parameters:
        - in: path
          name: leaveTypeId
          type: string
          required: true
          description: Unique ID associated with a leave type
      requestBody:
        content:
          application/json:
            schema:
              type: object
              $ref: '#/components/schemas/leaveTypeReq'
      responses:
        200:
          description: 'OK'
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/leaveTypeRes'
        500:
          description: 'Server Error'
    delete:
      tags:
        - leaveType
      summary: Delete leave type
      parameters:
        - in: path
          name: leaveTypeId
          type: string
          required: true
          description: Unique ID associated with a leave type
      responses:
        200:
          description: 'OK'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Leave type has been deleted
        500:
          description: 'Server Error'
  /instructor-leaves:
    get:
      tags:
        - instructorLeaves
      summary: Get all instructor leaves
      parameters:
        - in: query
          name: search
          type: string
          example: Learn
        - in: query
          name: pageRecord
          type: number
          example: 5
        - in: query
          name: pageNo
          type: number
          example: 2
        - in: query
          name: sortBy
          type: string
          example: [title, price, level]
        - in: query
          name: order
          type: string
          example: [ASC, DESC]
      responses:
        200:
          description: 'OK'
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalCount:
                    type: number
                    example: 1
                  records:
                    type: array
                    items:
                      $ref: '#/components/schemas/instructorLeavesRes'
        500:
          description: 'Server Error'
    post:
      tags:
        - instructorLeaves
      summary: Create instructor leaves
      requestBody:
        content:
          application/json:
            schema:
              type: object
              $ref: '#/components/schemas/instructorLeavesReq'
      responses:
        200:
          description: 'OK'
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/addinstructorLeavesRes'
        500:
          description: 'Server Error'

  /instructor-leaves/{instructorLeavesId}:
    put:
      tags:
        - instructorLeaves
      summary: Update instructor leaves
      parameters:
        - in: path
          name: instructorLeavesId
          type: string
          required: true
          description: Unique ID associated with a instructor leaves
      requestBody:
        content:
          application/json:
            schema:
              type: object
              $ref: '#/components/schemas/instructorLeavesReq'
      responses:
        200:
          description: 'OK'
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/addinstructorLeavesRes'
        500:
          description: 'Server Error'
    delete:
      tags:
        - instructorLeaves
      summary: Delete instructor leaves
      parameters:
        - in: path
          name: instructorLeavesId
          type: string
          required: true
          description: Unique ID associated with a instructor leaves
      responses:
        200:
          description: 'OK'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Instructor's leaves has been deleted
        500:
          description: 'Server Error'
  /instructor-leaves/instructors:
    get:
      tags:
        - instructorLeaves
      summary: Get all instructors
      responses:
        200:
          description: 'OK'
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalCount:
                    type: number
                    example: 1
                  records:
                    type: array
                    items:
                      $ref: '#/components/schemas/instituteInstructorRes'
        500:
          description: 'Server Error'
  /admin/leave:
    get:
      tags:
        - leave
      summary: Get all leaves
      parameters:
        - in: query
          name: search
          type: string
          example: Learn
        - in: query
          name: pageRecord
          type: number
          example: 5
        - in: query
          name: pageNo
          type: number
          example: 2
        - in: query
          name: sortBy
          type: string
          example: [title, price, level]
        - in: query
          name: order
          type: string
          example: [ASC, DESC]
      responses:
        200:
          description: 'OK'
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalCount:
                    type: number
                    example: 1
                  records:
                    type: array
                    items:
                      $ref: '#/components/schemas/adminLeaveRes'
        500:
          description: 'Server Error'
  /instructor/leave: 
    get:
      tags:
        - leave
      summary: Get all leaves of instructor
      parameters:
        - in: query
          name: search
          type: string
          example: Learn
        - in: query
          name: pageRecord
          type: number
          example: 5
        - in: query
          name: pageNo
          type: number
          example: 2
        - in: query
          name: sortBy
          type: string
          example: [title, price, level]
        - in: query
          name: order
          type: string
          example: [ASC, DESC]
      responses:
        200:
          description: 'OK'
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalCount:
                    type: number
                    example: 1
                  records:
                    type: array
                    items:
                      $ref: '#/components/schemas/adminLeaveRes'
        500:
          description: 'Server Error'

  /leave:
    post:
      tags:
        - leave
      summary: Create leave
      requestBody:
        content:
          application/json:
            schema:
              type: object
              $ref: '#/components/schemas/leaveReq'
      responses:
        200:
          description: 'OK'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Leave has been created
                  response:
                    type: object
                    $ref: '#/components/schemas/addLeaveRes'
        500:
          description: 'Server Error'
  /leave/{leaveId}:
    get:
      tags:
        - leave
      summary: Get leave by id
      parameters:
        - in: path
          name: leaveId
          type: string
          required: true
          description: Unique ID associated with a leave
      responses:
        200:
          description: 'OK'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Leave has been created
                  leaveData:
                    type: object
                    $ref: '#/components/schemas/LeaveRes'
        500:
          description: 'Server Error'
    put:
      tags:
        - leave
      summary: Update leave
      parameters:
        - in: path
          name: leaveId
          type: string
          required: true
          description: Unique ID associated with a leave
      requestBody:
        content:
          application/json:
            schema:
              type: object
              $ref: '#/components/schemas/leaveReq'
      responses:
        200:
          description: 'OK'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Leave has been updated
                  response:
                    type: object
                    $ref: '#/components/schemas/addLeaveRes'
        500:
          description: 'Server Error'
    delete:
      tags:
        - leave
      summary: Delete leave
      parameters:
        - in: path
          name: leaveId
          type: string
          required: true
          description: Unique ID associated with a leave
      responses:
        200:
          description: 'OK'
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    type: number
                    example: 1
                  message:
                    type: string
                    example: Leave has been deleted
        500:
          description: 'Server Error'
  
  /holiday-list:
    get:
      tags:
        - holidayList
      summary: Get all holidays
      parameters:
        - in: query
          name: search
          type: string
          example: Learn
        - in: query
          name: pageRecord
          type: number
          example: 5
        - in: query
          name: pageNo
          type: number
          example: 2
        - in: query
          name: sortBy
          type: string
          example: [title, price, level]
        - in: query
          name: order
          type: string
          example: [ASC, DESC]
      responses:
        200:
          description: 'OK'
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalCount:
                    type: number
                    example: 1
                  records:
                    type: array
                    items:
                      $ref: '#/components/schemas/holidayListRes'
        500:
          description: 'Server Error'
    post: 
      tags:
        - holidayList
      summary: Create holiday
      requestBody:
        content:
          application/json:
            schema:
              type: object
              $ref: '#/components/schemas/holidayListReq'
      responses:
        200:
          description: 'OK'
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/holidayListFullRes'
        500:
          description: 'Server Error'
  /holiday-list/{holidayListId}:
    put:
      tags:
        - holidayList
      summary: Update holiday
      parameters:
        - in: path
          name: holidayListId
          type: string
          required: true
          description: Unique ID associated with a holiday
      requestBody:
        content:
          application/json:
            schema:
              type: object
              $ref: '#/components/schemas/holidayListReq'
      responses:
        200:
          description: 'OK'
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: number
                    example: 1
                  rows:
                    type: array
                    items:
                      $ref: '#/components/schemas/holidayListFullRes'
        500:
          description: 'Server Error'
    delete:
      tags:
        - holidayList
      summary: Delete holiday
      parameters:
        - in: path
          name: holidayListId
          type: string
          required: true
          description: Unique ID associated with a holiday
      responses:
        200:
          description: 'OK'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Holiday has been deleted
        500:
          description: 'Server Error'

  /holiday:
    get:
      tags:
        - holiday
      summary: Get all holidays
      parameters:
        - in: query
          name: search
          type: string
          example: Learn
        - in: query
          name: pageRecord
          type: number
          example: 5
        - in: query
          name: pageNo
          type: number
          example: 2
        - in: query
          name: sortBy
          type: string
          example: [title, price, level]
        - in: query
          name: order
          type: string
          example: [ASC, DESC]
      responses:
        200:
          description: 'OK'
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalCount:
                    type: number
                    example: 1
                  records:
                    type: array
                    items:
                      $ref: '#/components/schemas/holidayRes'
        500:
          description: 'Server Error'
    post:
      tags:
        - holiday
      summary: Create holiday
      requestBody:
        content:
          application/json:
            schema:
              type: object
              $ref: '#/components/schemas/holidayReq'
      responses:
        200:
          description: 'OK'
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/holidayFullRes'
        500:
          description: 'Server Error'
  /holiday/{holidayId}:
    put:
      tags:
        - holiday
      summary: Update holiday
      parameters:
        - in: path
          name: holidayId
          type: string
          required: true
          description: Unique ID associated with a holiday
      requestBody:
        content:
          application/json:
            schema:
              type: object
              $ref: '#/components/schemas/holidayReq'
      responses:
        200:
          description: 'OK'
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: number
                    example: 1
                  rows:
                    type: array
                    items:
                      $ref: '#/components/schemas/holidayFullRes'
        500:
          description: 'Server Error'
    delete:
      tags:
        - holiday
      summary: Delete holiday
      parameters:
        - in: path
          name: holidayId
          type: string
          required: true
          description: Unique ID associated with a holiday
      responses:
        200:
          description: 'OK'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Holiday has been deleted
        500:
          description: 'Server Error'
      


# definitions
definitions:
  users:
    type: object
    required:
      - email
      - password
    properties:
      email:
        type: string
        description: user Email
      password:
        type: string
        description: user Password

components:
  schemas:
    # auth
    RegisterUserReq:
      type: object
      properties:
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: Doe
        email:
          type: string
          example: johndoe@yopmail.com
        password:
          type: string
          example: user@123
        date_of_birth:
          type: string
          example: 2000-10-10
        role:
          type: string
          example: Student
    RegisterUserRes:
      type: object
      properties:
        accessToken:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImNjYWE5ODAwLTcwYzUtNDY3ZS1hODkxLWZmMmQ5M2NhMzVmNCIsImlhdCI6MTY2OTk1NDQ4NCwiZXhwIjoxNjY5OTU4MDg0fQ.U94JmI_yXISQfizFXCGYfxT0asG9nSsq8osovmanGEE
        user:
          $ref: '#/components/schemas/UserData'
        message:
          type: string
          example: Signed up successfully.
    LoginUserReq:
      type: object
      properties:
        email:
          type: string
          example: user@yopmail.com
        password:
          type: string
          example: user@123
    LoginUserRes:
      type: object
      properties:
        accessToken:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImNjYWE5ODAwLTcwYzUtNDY3ZS1hODkxLWZmMmQ5M2NhMzVmNCIsImlhdCI6MTY2OTk1NDQ4NCwiZXhwIjoxNjY5OTU4MDg0fQ.U94JmI_yXISQfizFXCGYfxT0asG9nSsq8osovmanGEE
        refreshToken:
          type: string
          example: 1e3c9a16-6580-4523-a5e7-6401dbd6abc2
        user:
          $ref: '#/components/schemas/UserData'
    RefreshTokenReq:
      type: object
      properties:
        refreshToken:
          type: string
          example: fcb50213-a89f-4e28-94d3-1adb2dbcf186
    RefreshTokenRes:
      type: object
      properties:
        accessToken:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImNjYWE5ODAwLTcwYzUtNDY3ZS1hODkxLWZmMmQ5M2NhMzVmNCIsImlhdCI6MTY2OTk1NDQ4NCwiZXhwIjoxNjY5OTU4MDg0fQ.U94JmI_yXISQfizFXCGYfxT0asG9nSsq8osovmanGEE
        refreshToken:
          type: string
          example: 1e3c9a16-6580-4523-a5e7-6401dbd6abc2
        user:
          $ref: '#/components/schemas/UserData'
    # courses
    AddCourseReq:
      type: object
      properties:
        title:
          type: string
          example: Learn NodeJS with typescript
        level:
          type: string
          example: Beginner
        price:
          type: number
          example: 849
        language:
          type: string
          example: Hindi
        description:
          type: string
          example: Best course ever!
        thumbnail:
          type: file
          example: file
        trailer:
          type: file
          example: file
        coursetypeId:
          type: string
          example: 8f2f0716-9347-4758-90a5-cae6dd4dae6a
    AddCourseRes:
      type: object
      properties:
        id:
          type: string
          example: d2db6924-d326-4d43-af09-ced253109ff5
        title:
          type: string
          example: Learn NodeJS with typescript
        level:
          type: string
          example: Beginner
        price:
          type: number
          example: 849
        language:
          type: string
          example: Hindi
        description:
          type: string
          example: Best course ever!
        thumbnail:
          type: string
          example: http://192.168.1.106:5000/api/media/thumbnail/thumbnail_1670323749164.png
        trailer:
          type: string
          example: http://192.168.1.106:5000/media/trailer/trailer_1670323749164.png
        coursetypeId:
          type: string
          example: 8f2f0716-9347-4758-90a5-cae6dd4dae6a
        status:
          type: string
          example: Drafted
        createdAt:
          type: string
          example: 2022-12-06T10:49:09.176Z
        updatedAt:
          type: string
          example: 2022-12-06T10:49:09.176Z
        deletedAt:
          type: [string, null]
          example: null
    EditCourseRes:
      type: object
      properties:
        count:
          type: number
          example: 1
        rows:
          type: array
          items:
            $ref: '#/components/schemas/AddCourseRes'
    # curriculum
    AddSectionReq:
      type: object
      properties:
        title:
          type: string
          example: section 1
        objective:
          type: string
          example: Test Section
        course_id:
          type: string
          example: 242ced70-24bd-4423-8411-d81bd0877cc4
    AddSectionRes:
      type: object
      properties:
        id:
          type: string
          example: 3c760f5c-f00f-4801-92c8-69e63ab46ec3
        title:
          type: string
          example: section 1
        objective:
          type: string
          example: Test Section
        course_id:
          type: string
          example: 242ced70-24bd-4423-8411-d81bd0877cc4
    EditSectionReq:
      type: object
      properties:
        title:
          type: string
          example: section main
        objective:
          type: string
          example: Testing section editing
    EditSectionRes:
      type: object
      properties:
        count:
          type: number
          example: 1
        rows:
          type: array
          items:
            $ref: '#/components/schemas/EditRes'
    EditRes:
      type: object
      properties:
        id:
          type: string
          example: 3c760f5c-f00f-4801-92c8-69e63ab46ec3
        title:
          type: string
          example: section 1
        objective:
          type: string
          example: Test Section
        course_id:
          type: string
          example: 242ced70-24bd-4423-8411-d81bd0877cc4
        createdAt:
          type: string
          example: 2022-12-06T10:49:09.176Z
        updatedAt:
          type: string
          example: 2022-12-06T10:49:09.176Z
        deletedAt:
          type: string
          example: NULL
    # curriculum tutorial
    AddTutorialReq:
      type: object
      properties:
        title:
          type: string
          example: test123
        tutorial:
          type: file
          example: file
    AddTutorialRes:
      type: object
      properties:
        id:
          type: string
          example: 8fdafe05-5b18-4b9f-b09f-d2acd79b8aa0
        title:
          type: string
          example: test123
        video_url:
          type: string
          example: http://192.168.1.106:5000/media/http://192.168.1.106:5000/media/tutorial/tutorial_1670498175618.mp4
    DeleteTutorialRes:
      type:
    # products
    AddProductReq:
      type: object
      properties:
        title:
          type: string
          example: DIY BOT
        price:
          type: number
          example: 899
        category:
          type: string
          example: Uncategorized
        sku:
          type: string
          example: STMBOT-001
        description:
          type: string
          example: (Sample Product Description) – Try to put as much as info like features and wow factors.
        productImg:
          type: file
          example: file
        weight:
          type: string
          example: 1 kg
        dimension:
          type: string
          example: 12 × 10 × 20 cm
    AddProductRes:
      type: object
      properties:
        id:
          type: string
          example: 2e8bd131-eb6a-4753-91b7-e7a61e43ab94
        title:
          type: string
          example: DIY BOT
        price:
          type: number
          example: 899
        category:
          type: string
          example: Uncategorized
        sku:
          type: string
          example: STMBOT-001
        description:
          type: string
          example: (Sample Product Description) – Try to put as much as info like features and wow factors.
        thumbnail:
          type: string
          example: http://192.168.1.14:5000/media/productImg/productImg_1670406128427.png
        weight:
          type: string
          example: 1 kg
        dimension:
          type: string
          example: 12 × 10 × 20 cm
    EditProductRes:
      type: object
      properties:
        count:
          type: number
          example: 1
        rows:
          type: array
          items:
            $ref: '#/components/schemas/AddCourseRes'
    #generic
    Course:
      type: object
      properties:
        id:
          type: string
          example: 2e8bd131-eb6a-4753-91b7-e7a61e43ab94
        title:
          type: string
          example: Learn ReactTs
        price:
          type: number
          example: 899
        level:
          type: string
          example: Begginer
        language:
          type: string
          example: English
        status:
          type: string
          example: Drafted
        description:
          type: string
          example: It covers all features from latest React Technology
        thumbnail:
          type: string
          example: http://192.168.1.106:5000/media/thumbnail/thumbnail_1670323749164.png
        trailer:
          type: string
          example: http://192.168.1.106:5000/media/trailer/trailer_1670323749164.png
        createdAt:
          type: string
          example: 2022-12-06T07:51:52.765Z
        updatedAt:
          type: string
          example: 2022-12-06T07:51:52.765Z
        deletedAt:
          type: [string, null]
          example: null
        coursetypeId:
          type: string
          example: 8f2f0716-9347-4758-90a5-cae6dd4dae6a
        CourseType:
          type: object
          $ref: '#/components/schemas/CourseType'
        Trainers:
          type: array
          items:
            $ref: '#/components/schemas/Trainer'
    Trainer:
      type: object
      properties:
        trainer_id:
          type: string
          example: ba05400d-fc39-4789-bbb0-dd46287a9953
        user_id:
          type: string
          example: a4007575-0b46-44d1-828b-fe105194ce1f
        createAt:
          type: string
          example: 2022-12-05T07:46:25.751Z
        updatedAt:
          type: string
          example: 2022-12-05T07:46:25.751Z
        deletedAt:
          type: [string | null]
          example: null
        User:
          $ref: '#/components/schemas/UserData'
    Product:
      type: object
      properties:
        id:
          type: string
          example: 54ea619b-21d7-40bb-bfc9-069aab53ab85
        title:
          type: string
          example: DIY BOT
        price:
          type: number
          example: 899
        category:
          type: string
          example: Uncategorized
        sku:
          type: string
          example: STMBOT-001
        description:
          type: string
          example: (Sample Product Description) – Try to put as much as info like features and wow factors.
        thumbnail:
          type: string
          example: http://192.168.1.14:5000/media/productImg/productImg_1670406128427.png
        weight:
          type: string
          example: 1 kg
        dimension:
          type: string
          example: 12 × 10 × 20 cm
        Users:
          type: array
          items:
            $ref: '#/components/schemas/UserData'
        ProductDimensionMap:
          $ref: '#/components/schemas/ProductDimensionMapData'
    ProductDimensionMapData:
      type: object
      properties:
        id:
          type: string
          example: 0d6391a6-8928-4965-a3f6-156899119f95
        weight:
          type: string
          example: 1 kg
        dimension:
          type: string
          example: 1 x 1 cm
        createdAt:
          type: string
          example: 2022-12-06T10:49:09.176Z
        updatedAt:
          type: string
          example: 2022-12-06T10:49:09.176Z
        deletedAt:
          type: string
          example: NULL
        product_id:
          type: string
          example: 6faf1d08-ecd2-4d3e-bd8a-ebb87391f220
    Section:
      type: object
      properties:
        id:
          type: string
          example: 97ecd3bb-1a23-499c-bb80-3f246fce87a6
        title:
          type: string
          example: section 2
        objective:
          type: string
          example: For test purpose
        createdAt:
          type: string
          example: 2022-12-06T10:49:09.176Z
        updatedAt:
          type: string
          example: 2022-12-06T10:49:09.176Z
        deletedAt:
          type: string
          example: NULL
        course_id:
          type: string
          example: 242ced70-24bd-4423-8411-d81bd0877cc4
        CurriCulumVideos:
          type: array
          items:
            $ref: '#/components/schemas/CurriCulumVideosData'
    CurriCulumVideosData:
      type: object
      properties:
        id:
          type: string
          example: 97ecd3bb-1a23-499c-bb80-3f246fce87a6
        title:
          type: string
          example: Test video
        video_url:
          type: string
          example: http://192.168.1.106:5000/media/tutorial/tutorial_1670490931689.mp4
        createdAt:
          type: string
          example: 2022-12-06T10:49:09.176Z
        updatedAt:
          type: string
          example: 2022-12-06T10:49:09.176Z
        deletedAt:
          type: string
          example: NULL
        curriculum_id:
          type: string
          example: 97ecd3bb-1a23-499c-bb80-3f246fce87a6
        CurriculumSection:
          type: object
          properties:
            id:
              type: string
              example: 97ecd3bb-1a23-499c-bb80-3f246fce87a6
            title:
              type: string
              example: section 2
            objective:
              type: string
              example: For test purpose
            createdAt:
              type: string
              example: 2022-12-06T10:49:09.176Z
            updatedAt:
              type: string
              example: 2022-12-06T10:49:09.176Z
            deletedAt:
              type: string
              example: NULL
            course_id:
              type: string
              example: 242ced70-24bd-4423-8411-d81bd0877cc4
    UserData:
      type: object
      properties:
        id:
          type: string
          example: a4007575-0b46-44d1-828b-fe105194ce1f
        fullName:
          type: string
          example: John Doe
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: Doe
        email:
          type: string
          example: johndoe@yopmail.com
        isEmailVerified:
          type: boolean
          example: false
        date_of_birth:
          type: string
          example: 2000-10-10T00:00:00.000Z
        role:
          type: string
          example: Student
        role_id:
          type: string
          example: e29d1afb-e3a0-41cb-a473-0549228de148
        ProductUser:
          $ref: '#/components/schemas/ProductUser'
    ProductUser:
      type: object
      properties:
        createdAt:
          type: string
          example: 2022-12-06T10:49:09.176Z
        updatedAt:
          type: string
          example: 2022-12-06T10:49:09.176Z
        product_id:
          type: string
          example: 6faf1d08-ecd2-4d3e-bd8a-ebb87391f220
        userId:
          type: string
          example: 04e1c75c-b239-4d45-b129-1b8136f4b184
    Cart:
      type: object
      properties:
        id:
          type: string
          example: f560b959-af06-4e9c-859b-f621092b12fc
        createdAt:
          type: string
          example: 2022-12-09T04:17:17.962Z
        updatedAt:
          type: string
          example: 2022-12-09T04:17:17.962Z
        deletedAt:
          type: [string, null]
          example: null
        user_id:
          type: string
          example: 5ed57d77-5aca-4f94-9c23-6e51ceca0b42
        CartItems:
          type: array
          items:
            $ref: '#/components/schemas/CartItem'
    CartItem:
      type: object
      properties:
        id:
          type: string
          example: f2d2040d-4f9e-4013-ac40-37c63428a32c
        item_type:
          type: string
          example: Product
        quantity:
          type: number
          example: 1
        createdAt:
          type: string
          example: 2022-12-09T04:17:17.962Z
        updatedAt:
          type: string
          example: 2022-12-09T04:17:17.962Z
        deletedAt:
          type: [string, null]
          example: null
        CartId:
          type: string
          example: f560b959-af06-4e9c-859b-f621092b12fc
        course_id:
          type: string | null
          example: null
        product_id:
          type: string|null
          example: 54ea619b-21d7-40bb-bfc9-069aab53ab85
        CourseId:
          type: string | null
          example: null
        ProductId:
          type: string|null
          example: 54ea619b-21d7-40bb-bfc9-069aab53ab85
        Course:
          type: object | null
          example: null
        Product:
          $ref: '#/components/schemas/ProductShort'
    ProductShort:
      type: object
      properties:
        id:
          type: string
          example: 54ea619b-21d7-40bb-bfc9-069aab53ab85
        title:
          type: string
          example: DIY BOT
        price:
          type: number
          example: 899
        category:
          type: string
          example: Uncategorized
        sku:
          type: string
          example: STMBOT-001
        description:
          type: string
          example: (Sample Product Description) – Try to put as much as info like features and wow factors.
        thumbnail:
          type: string
          example: http://192.168.1.14:5000/media/productImg/productImg_1670406128427.png
        status:
          type: string
          example: Published
        createdAt:
          type: string
          example: 2022-12-09T04:17:17.962Z
        updatedAt:
          type: string
          example: 2022-12-09T04:17:17.962Z
        deletedAt:
          type: [string, null]
          example: null
    CartItemShort:
      type: object
      properties:
        id:
          type: string
          example: f2d2040d-4f9e-4013-ac40-37c63428a32c
        item_type:
          type: string
          example: Product
        quantity:
          type: number
          example: 1
        createdAt:
          type: string
          example: 2022-12-09T04:17:17.962Z
        updatedAt:
          type: string
          example: 2022-12-09T04:17:17.962Z
        deletedAt:
          type: [string, null]
          example: null
        CartId:
          type: string
          example: f560b959-af06-4e9c-859b-f621092b12fc
        course_id:
          type: string | null
          example: null
        product_id:
          type: string|null
          example: 54ea619b-21d7-40bb-bfc9-069aab53ab85
        CourseId:
          type: string | null
          example: null
        ProductId:
          type: string|null
          example: 54ea619b-21d7-40bb-bfc9-069aab53ab85
    Error400:
      type: object
      properties:
        message:
          type: string
          example: Email field is required
    Error404:
      type: object
      properties:
        message:
          type: string
          example: Requested Resource is not available
    # Order

    ordersReq:
      type: object
      properties:
        amount:
          type: number
          example: 7880

    ordersRes:
      type: object
      properties:
        id:
          type: string
          example: 1e062ce6-0478-414a-ba8e-323308281bb1
        amount:
          type: number
          example: 7880
        payment_id:
          type: string
          example: pay_L4ntSx2tc4ekWw
        razorpay_order_id:
          type: string
          example: order_L4ntFDu2fPX9ml
        razorpay_signature:
          type: string
          example: 8d2bd04a7e83c4f6d3d86921b2a786af6b93e8245b98e44e0e33483846555261
    # Order verify
    orderverifyReq:
      type: object
      properties:
        orderId:
          type: string
          example: b81a0536-ef57-4e39-ae3c-0ea0f87f109d
        razorpayOrderId:
          type: string
          example: order_L4nhslmHmq8zjb
        paymentId:
          type: string
          example: pay_L4niIh2fHC8f5C
        razorpaySignature:
          type: string
          example: c21114de2c38b133100c0f184e833f15d797dbff6fed84d045dd5466f940221d
        cartItems:
          type: array
          items:
            type: string
            example: 1bd8b0bd-491e-46e6-8238-fbdb669c42e6

    orderverifyRes:
      type: object
      properties:
        id:
          type: string
          example: 10de6b98-966b-40f4-9dd3-d1fc5af9764f
        item_type:
          type: string
          example: Product
        quantity:
          type: number
          example: 1
        ProductId:
          type: string
          example: 09fe5328-b086-4d8c-b0c7-6258728e58be
        CourseId:
          type: string
          example: null
        OrderId:
          type: string
          example: b81a0536-ef57-4e39-ae3c-0ea0f87f109d

    orderlistRes:
      type: object
      properties:
        id:
          type: string
          example: 10de6b98-966b-40f4-9dd3-d1fc5af9764f
        amount:
          type: integer
          example: 5565
        payment_id:
          type: string
          example: pay_LAITsL3NDw4xXs
        razorpay_order_id:
          type: string
          example: order_LAITVWDmrW23cF
        razorpay_signature:
          type: string
          example: 345714bd95053d61299a774f62ce88176d53c4c3e4c680d86eb21ca7920c4688
        createdAt:
          type: string
          example: 2023-01-30T06:54:43.757Z
        updatedAt:
          type: string
          example: 2023-01-30T06:54:43.757Z
        deletedAt:
          type: [string, null]
          example: null
        UserId:
          type: string
          example: a73a96df-679f-4217-a738-a9264c795395
        OrderItems:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'

    OrderItem:
      type: object
      properties:
        id:
          type: string
          example: f2d2040d-4f9e-4013-ac40-37c63428a32c
        item_type:
          type: string
          example: Course
        quantity:
          type: number
          example: 1
        createdAt:
          type: string
          example: 2022-12-09T04:17:17.962Z
        updatedAt:
          type: string
          example: 2022-12-09T04:17:17.962Z
        deletedAt:
          type: [string, null]
          example: null
        OrderId:
          type: string
          example: 33748c2d-bb33-4562-9649-80e9640ee8bf
        CourseId:
          type: string
          example: 4beb161b-8997-4669-b8b1-e2771823e834
        ProductId:
          type: [string, null]
          example: null
        Product:
          type: [string, null]
          example: null
        Course:
          $ref: '#/components/schemas/Courses'
    Courses:
      type: object
      properties:
        id:
          type: string
          example: f2d2040d-4f9e-4013-ac40-37c63428a32c
        title:
          type: string
          example: Learn NodeJs
        price:
          type: number
          example: 454
        level:
          type: string
          example: Advanced
        language:
          type: string
          example: English
        status:
          type: string
          example: Published
        description:
          type: string
          example: Best Course to learn
        thumbnail:
          type: string
          example: http://192.168.1.19:5000/media/thumbnail/thumbnail_1675061632094.jpg
        trailer:
          type: string
          example: http://192.168.1.19:5000/media/trailer/trailer_1675061632267.mp4
        createdAt:
          type: string
          example: 2022-12-09T04:17:17.962Z
        updatedAt:
          type: string
          example: 2022-12-09T04:17:17.962Z
        deletedAt:
          type: [string, null]
          example: null
        Trainers:
          type: array
          items:
            $ref: '#/components/schemas/trainer'

    trainer:
      type: object
      properties:
        trainer_id:
          type: string
          example: f2d2040d-4f9e-4013-ac40-37c63428a32c
        user_id:
          type: string
          example: 0d3c918f-ba90-4584-bfd2-ec65f9ce72e4
        createdAt:
          type: string
          example: 2022-12-09T04:17:17.962Z
        updatedAt:
          type: string
          example: 2022-12-09T04:17:17.962Z
        deletedAt:
          type: [string, null]
          example: null
        userId:
          type: string
          example: 0d3c918f-ba90-4584-bfd2-ec65f9ce72e4
        CoursesTrainers:
          $ref: '#/components/schemas/CoursesTrainer'
        User:
          $ref: '#/components/schemas/Users'
    CoursesTrainer:
      type: object
      properties:
        createdAt:
          type: string
          example: 2022-12-09T04:17:17.962Z
        updatedAt:
          type: string
          example: 2022-12-09T04:17:17.962Z
        course_id:
          type: string
          example: 4beb161b-8997-4669-b8b1-e2771823e834
        trainer_id:
          type: string
          example: e1952a6f-b9c7-420b-8cee-fc013816277e
    Users:
      type: object
      properties:
        fullName:
          type: string
          example: Admin Manual
        id:
          type: string
          example: 0d3c918f-ba90-4584-bfd2-ec65f9ce72e4
        firstName:
          type: string
          example: Admin
        lastName:
          type: string
          example: Manual
        isEmailVerified:
          type: string
          example: true
        email:
          type: string
          example: admin@yopmail.com
        password:
          type: string
          example: $2b$08$4Y1L0pRRxeM0oHmCJu1eA.PFcSOEGTlVBr8ZDOILJlO7HAjLsd1PW
        date_of_birth:
          type: string
          example: 2000-07-10T18:30:00.000Z
        role:
          type: string
          example: Admin
        role_id:
          type: string
          example: 0d3c918f-ba90-4584-bfd2-ec65f9ce72e4

    # Quiz
    quiztitleReq:
      type: object
      properties:
        title:
          type: string
          example: how are u
        curriculum_id:
          type: string
          example: 57f8e71a-3d18-48cc-a9e3-b23065f5f619
    updateQuiztitleReq:
      type: object
      properties:
        title:
          type: string
          example: how are u
    updateQuizRes:
      type: object
      properties:
        count:
          type: number
          example: 1
        rows:
          type: array
          items:
            $ref: '#/components/schemas/quiztitleRes'
    quiztitleRes:
      type: object
      properties:
        id:
          type: string
          example: 8f2f0716-9347-4758-90a5-cae6dd4dae6a
        title:
          type: string
          example: how are u
        curriculum_id:
          type: string
          example: 57f8e71a-3d18-48cc-a9e3-b23065f5f619
        createdAt:
          type: string
          example: 2022-12-09T04:17:17.962Z
        updatedAt:
          type: string
          example: 2022-12-09T04:17:17.962Z
        deletedAt:
          type: [string, null]
          example: null

    quizlistRes:
      type: object
      properties:
        id:
          type: string
          example: 8f2f0716-9347-4758-90a5-cae6dd4dae6a
        title:
          type: string
          example: how are u
        createdAt:
          type: string
          example: 2022-12-09T04:17:17.962Z
        updatedAt:
          type: string
          example: 2022-12-09T04:17:17.962Z
        deletedAt:
          type: [string, null]
          example: null
        curriculum_id:
          type: string
          example: 57f8e71a-3d18-48cc-a9e3-b23065f5f619

    quizlistadminRes:
      type: object
      properties:
        id:
          type: string
          example: 8f2f0716-9347-4758-90a5-cae6dd4dae6a
        title:
          type: string
          example: how are u
        createdAt:
          type: string
          example: 2022-12-09T04:17:17.962Z
        updatedAt:
          type: string
          example: 2022-12-09T04:17:17.962Z
        deletedAt:
          type: [string, null]
          example: null
        curriculum_id:
          type: string
          example: 57f8e71a-3d18-48cc-a9e3-b23065f5f619
        QuizQues:
          type: array
          items:
            $ref: '#/components/schemas/QuizQue'

    QuizQue:
      type: object
      properties:
        id:
          type: string
          example: 447ecc77-dcdb-4087-9b5b-005c2d0af3d0
        question:
          type: string
          example: How are you?
        quiz_id:
          type: string
          example: 8f2f0716-9347-4758-90a5-cae6dd4dae6a
        explanation:
          type: string
          example: sxsxaxaxsxasxasxasx
        QuizAns:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/QuizAnsw'
              - $ref: '#/components/schemas/QuizAnswer'
              - $ref: '#/components/schemas/Answer'
              - $ref: '#/components/schemas/QuizAnswers'
    QuizAnsw:
      type: object
      properties:
        id:
          type: string
          example: 7613dc96-dab7-4aae-b7c3-88896a4cdecb
        QuizQueId:
          type: string
          example: 447ecc77-dcdb-4087-9b5b-005c2d0af3d0
        option:
          type: string
          example: fine
    QuizAnswer:
      type: object
      properties:
        id:
          type: string
          example: 554feb99-8487-47ac-bf3a-66f677ff2d13
        QuizQueId:
          type: string
          example: 447ecc77-dcdb-4087-9b5b-005c2d0af3d0
        option:
          type: string
          example: not fine
    Answer:
      type: object
      properties:
        id:
          type: string
          example: a1ae9d2d-bf57-475b-a941-b9eb9fcdb709
        QuizQueId:
          type: string
          example: 447ecc77-dcdb-4087-9b5b-005c2d0af3d0
        option:
          type: string
          example: good
    QuizAnswers:
      type: object
      properties:
        id:
          type: string
          example: d1c8cc01-8fe3-49f1-8c32-33d77adcb991
        QuizQueId:
          type: string
          example: 447ecc77-dcdb-4087-9b5b-005c2d0af3d0
        option:
          type: string
          example: excellent

    getquizRes:
      type: object
      properties:
        id:
          type: string
          example: 8f2f0716-9347-4758-90a5-cae6dd4dae6a
        title:
          type: string
          example: how are u
        createdAt:
          type: string
          example: 2022-12-09T04:17:17.962Z
        updatedAt:
          type: string
          example: 2022-12-09T04:17:17.962Z
        deletedAt:
          type: [string, null]
          example: null
        curriculum_id:
          type: string
          example: 57f8e71a-3d18-48cc-a9e3-b23065f5f619
        QuizQuest:
          type: array
          items:
            $ref: '#/components/schemas/QuizQuesti'

    QuizQuesti:
      type: object
      properties:
        id:
          type: string
          example: 447ecc77-dcdb-4087-9b5b-005c2d0af3d0
        question:
          type: string
          example: How are you?
        quiz_id:
          type: string
          example: 8f2f0716-9347-4758-90a5-cae6dd4dae6a
        explanation:
          type: string
          example: sxsxaxaxsxasxasxasx
        aw:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/QuizAnswe'
              - $ref: '#/components/schemas/QuizAn'
              - $ref: '#/components/schemas/As'
              - $ref: '#/components/schemas/QuizAnswerer'
    QuizAnswe:
      type: object
      properties:
        id:
          type: string
          example: 7613dc96-dab7-4aae-b7c3-88896a4cdecb
        QuizQueId:
          type: string
          example: 447ecc77-dcdb-4087-9b5b-005c2d0af3d0
        option:
          type: string
          example: fine
    QuizAn:
      type: object
      properties:
        id:
          type: string
          example: 554feb99-8487-47ac-bf3a-66f677ff2d13
        QuizQueId:
          type: string
          example: 447ecc77-dcdb-4087-9b5b-005c2d0af3d0
        option:
          type: string
          example: not fine
    As:
      type: object
      properties:
        id:
          type: string
          example: a1ae9d2d-bf57-475b-a941-b9eb9fcdb709
        QuizQueId:
          type: string
          example: 447ecc77-dcdb-4087-9b5b-005c2d0af3d0
        option:
          type: string
          example: good
    QuizAnswerer:
      type: object
      properties:
        id:
          type: string
          example: d1c8cc01-8fe3-49f1-8c32-33d77adcb991
        QuizQueId:
          type: string
          example: 447ecc77-dcdb-4087-9b5b-005c2d0af3d0
        option:
          type: string
          example: excellent

    getallquizRes:
      type: object
      properties:
        id:
          type: string
          example: 8f2f0716-9347-4758-90a5-cae6dd4dae6a
        title:
          type: string
          example: how are u
        createdAt:
          type: string
          example: 2022-12-09T04:17:17.962Z
        updatedAt:
          type: string
          example: 2022-12-09T04:17:17.962Z
        deletedAt:
          type: [string, null]
          example: null
        curriculum_id:
          type: string
          example: 57f8e71a-3d18-48cc-a9e3-b23065f5f619
        QuizQuest:
          type: array
          items:
            $ref: '#/components/schemas/QuizQuestion'

    QuizQuestion:
      type: object
      properties:
        id:
          type: string
          example: 447ecc77-dcdb-4087-9b5b-005c2d0af3d0
        question:
          type: string
          example: How are you?
        quiz_id:
          type: string
          example: 8f2f0716-9347-4758-90a5-cae6dd4dae6a
        explanation:
          type: string
          example: sxsxaxaxsxasxasxasx
        createdAt:
          type: string
          example: 2022-12-09T04:17:17.962Z
        updatedAt:
          type: string
          example: 2022-12-09T04:17:17.962Z
        deletedAt:
          type: [string, null]
          example: null
        aw:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/GetQuiz'
              - $ref: '#/components/schemas/GetQuizAns'
              - $ref: '#/components/schemas/GetAnsw'
              - $ref: '#/components/schemas/GetQuizAnswer'
    GetQuiz:
      type: object
      properties:
        id:
          type: string
          example: 7613dc96-dab7-4aae-b7c3-88896a4cdecb
        QuizQueId:
          type: string
          example: 447ecc77-dcdb-4087-9b5b-005c2d0af3d0
        option:
          type: string
          example: fine
        is_correct:
          type: string
          example: true
        createdAt:
          type: string
          example: 2022-12-09T04:17:17.962Z
        updatedAt:
          type: string
          example: 2022-12-09T04:17:17.962Z
        deletedAt:
          type: [string, null]
          example: null
    GetQuizAns:
      type: object
      properties:
        id:
          type: string
          example: 554feb99-8487-47ac-bf3a-66f677ff2d13
        QuizQueId:
          type: string
          example: 447ecc77-dcdb-4087-9b5b-005c2d0af3d0
        option:
          type: string
          example: not fine
        is_correct:
          type: string
          example: true
        createdAt:
          type: string
          example: 2022-12-09T04:17:17.962Z
        updatedAt:
          type: string
          example: 2022-12-09T04:17:17.962Z
        deletedAt:
          type: [string, null]
          example: null
    GetAnsw:
      type: object
      properties:
        id:
          type: string
          example: a1ae9d2d-bf57-475b-a941-b9eb9fcdb709
        QuizQueId:
          type: string
          example: 447ecc77-dcdb-4087-9b5b-005c2d0af3d0
        option:
          type: string
          example: good
        is_correct:
          type: string
          example: true
        createdAt:
          type: string
          example: 2022-12-09T04:17:17.962Z
        updatedAt:
          type: string
          example: 2022-12-09T04:17:17.962Z
        deletedAt:
          type: [string, null]
          example: null
    GetQuizAnswer:
      type: object
      properties:
        id:
          type: string
          example: d1c8cc01-8fe3-49f1-8c32-33d77adcb991
        QuizQueId:
          type: string
          example: 447ecc77-dcdb-4087-9b5b-005c2d0af3d0
        option:
          type: string
          example: excellent
        is_correct:
          type: string
          example: false
        createdAt:
          type: string
          example: 2022-12-09T04:17:17.962Z
        updatedAt:
          type: string
          example: 2022-12-09T04:17:17.962Z
        deletedAt:
          type: [string, null]
          example: null

    commentlistRes:
      type: object
      properties:
        records :
          type: array
          items:
          $ref: '#/components/schemas/commentlist'

    commentlist:
      type: object
      properties:
        id:
          type: string
          example: 8f2f0716-9347-4758-90a5-cae6dd4dae6a
        title:
          type: string
          example: how are u
        createdAt:
          type: string
          example: 2022-12-09T04:17:17.962Z
        updatedAt:
          type: string
          example: 2022-12-09T04:17:17.962Z   
        deletedAt:
          type: [string, null]
          example: null
        curriculum_id:
          type: string
          example: 57f8e71a-3d18-48cc-a9e3-b23065f5f619

    commentReq:
      type: object
      properties:
        comment:
          type: string
          example: how are u
        title:
          type: string
          example: 57f8e71a-3d18-48cc-a9e3-b23065f5f619   
        thumbnail:
          type: string
          example: 57f8e71a-3d18-48cc-a9e3-b23065f5f619

    commentRes:
       type: object
       properties:
          id:
            type: string
            example: 8f2f0716-9347-4758-90a5-cae6dd4dae6a
            comment:
              type: string
              example: how are u
          title:
              type: string
              example: how are u
          course_id:
              type: string
              example: 57f8e71a-3d18-48cc-a9e3-b23065f5f619
          userId:
              type: string
              example: 57f8e71a-3d18-48cc-a9e3-b23065f5f619
          thumbnail:
              type: string
              example: 57f8e71a-3d18-48cc-a9e3-b23065f5f619
          createdAt:
              type: string
              example: 2022-12-09T04:17:17.962Z
          updatedAt:
              type: string
              example: 2022-12-09T04:17:17.962Z
          deletedAt:
              type: [string, null]
              example: null

    updatecommentReq:
      type: object
      properties:
        comment:
          type: string
          example: how are u
        title:
          type: string
          example: 57f8e71a-3d18-48cc-a9e3-b23065f5f619   
        thumbnail:
          type: string
          example: 57f8e71a-3d18-48cc-a9e3-b23065f5f619

    updatecommentRes:
      type: object
      properties:
          count:
            type: integer
            example: 1
          rows:
            type: array
            items:
              $ref: '#/components/schemas/commentRes'

    replylistRes: 
      type: object
      properties:
        records :
          type: array
          items:
          $ref: '#/components/schemas/replylist'

    replylist:
      type: object
      properties:
        id:
          type: string
          example: 8f2f0716-9347-4758-90a5-cae6dd4dae6a
        comment_id:
          type: string
          example: 57f8e71a-3d18-48cc-a9e3-b23065f5f619
        reply:
          type: string
          example: how are u
        createdAt:
          type: string
          example: 2022-12-09T04:17:17.962Z
        updatedAt:
          type: string
          example: 2022-12-09T04:17:17.962Z   
        deletedAt:
          type: [string, null]
          example: null
        userId:
          type: string
          example: 57f8e71a-3d18-48cc-a9e3-b23065f5f619
        User:
          type: object
          properties:
            id:
              type: string
              example: 8f2f0716-9347-4758-90a5-cae6dd4dae6a
            name:
              type: string
              example: 57f8e71a-3d18-48cc-a9e3-b23065f5f619
            email:
              type: string
              example: 57f8e71a-3d18-48cc-a9e3-b23065f5f619
            password:
              type: string
              example: 57f8e71a-3d18-48cc-a9e3-b23065f5f619
            role:
              type: string
              example: Admin
            createdAt:
              type: string
              example: 2022-12-09T04:17:17.962Z
            updatedAt:
              type: string
              example: 2022-12-09T04:17:17.962Z
            deletedAt:
              type: [string, null]
              example: null
        LikeDislikes:
          type: array
          items:
            $ref: '#/components/schemas/LikeDislikesRes'


    LikeDislikesRes:
      type: object
      properties:
        id:
          type: string
          example: 8f2f0716-9347-4758-90a5-cae6dd4dae6a
        reply_id:
          type: string
          example: 57f8e71a-3d18-48cc-a9e3-b23065f5f619
        userId:
          type: string
          example: 57f8e71a-3d18-48cc-a9e3-b23065f5f619
        is_like:
          type: string
          example: 57f8e71a-3d18-48cc-a9e3-b23065f5f619
        createdAt:
          type: string
          example: 2022-12-09T04:17:17.962Z
        updatedAt:
          type: string
          example: 2022-12-09T04:17:17.962Z
        deletedAt:
          type: [string, null]
          example: null
          
    replyReq:
      type: object
      properties:
        reply:
          type: string
          example: how are u
        thumbnail:
          type: file
          example: 57f8e71a-3d18-48cc-a9e3-b23065f5f619
    
    replyRes:
      type: object
      properties:
        id:
          type: string
          example: 8f2f0716-9347-4758-90a5-cae6dd4dae6a
        reply:
          type: string
          example: how are u  
        comment_id:
          type: string
          example: 57f8e71a-3d18-48cc-a9e3-b23065f5f619
        userId:
          type: string
          example: 57f8e71a-3d18-48cc-a9e3-b23065f5f619
        thumbnail:
          type: [string, null]
          example: null
        createdAt:
          type: string
          example: 2022-12-09T04:17:17.962Z
        updatedAt:
          type: string
          example: 2022-12-09T04:17:17.962Z
        deletedAt:
          type: [string, null]
          example: null
    updatereplyReq:
      type: object
      properties:
        reply:
          type: string
          example: how are u
       
    updatereplyRes:
      type: object
      properties:
          count:
            type: integer
            example: 1
          rows:
            type: array
            items:
              $ref: '#/components/schemas/replyRes'
    
    
    likedislikeRes:
      type: object
      properties:
        id:
          type: string
          example: 8f2f0716-9347-4758-90a5-cae6dd4dae6a
        reply_id:
          type: string
          example: 57f8e71a-3d18-48cc-a9e3-b23065f5f619
        userId:
          type: string
          example: 57f8e71a-3d18-48cc-a9e3-b23065f5f619
        is_like:
          type: string
          example: 57f8e71a-3d18-48cc-a9e3-b23065f5f619
        createdAt:
          type: string
          example: 2022-12-09T04:17:17.962Z
        updatedAt:
          type: string
          example: 2022-12-09T04:17:17.962Z
        deletedAt:
          type: [string, null]
          example: null
    
    commentFullRes:
      type: array
      items: 
        $ref: '#/components/schemas/commentFullResData'
        
    commentFullResData:
      type: object
      properties:
        id:
          type: string
          example: 8f2f0716-9347-4758-90a5-cae6dd4dae6a
        title:
          type: string
          example: how are u
        comment:
          type: string
          example: how are u
        thumbnail:
          type: [string, null]
          example: null
        userId:
          type: string
          example: 57f8e71a-3d18-48cc-a9e3-b23065f5f619
        courseId:
          type: string
          example: 57f8e71a-3d18-48cc-a9e3-b23065f5f619
        createdAt:
          type: string
          example: 2022-12-09T04:17:17.962Z
        updatedAt:
          type: string
          example: 2022-12-09T04:17:17.962Z
        deletedAt:
          type: [string, null]
          example: null
        User:
          $ref: '#/components/schemas/Users'
        LikeDislikes:
          type: array
          items:
            $ref: '#/components/schemas/LikeDislikesRes'
        Replies:
          type: array
          items:
            $ref: '#/components/schemas/RepliesRes'

    RepliesRes:
      type: object
      properties:
        id:
          type: string
          example: 8f2f0716-9347-4758-90a5-cae6dd4dae6a
        reply:
          type: string
          example: how are u
        comment_id:
          type: string
          example: 57f8e71a-3d18-48cc-a9e3-b23065f5f619
        userId:
          type: string
          example: 57f8e71a-3d18-48cc-a9e3-b23065f5f619
        thumbnail:
          type: [string, null]
          example: null
        createdAt:
          type: string
          example: 2022-12-09T04:17:17.962Z
        updatedAt:
          type: string
          example: 2022-12-09T04:17:17.962Z
        deletedAt:
          type: [string, null]
          example: null
        User:
          $ref: '#/components/schemas/Users'
        LikeDislikes:
          type: array
          items:
            $ref: '#/components/schemas/LikeDislikesRes'
    
    addLiveStreamReq:
      type: object
      properties:
        title: 
          type: string
          example: JS For FUN
        subscriptionPrice:
          type: number
          example: 499
        categories:
          type: string
          example: development
        description:
          type: string
          example: Learn Zero to Hero About Javascript in just 60 minutes.
        date:
          type: string
          example: 2023-01-01
        startTime:
          type: string
          example: 12:00
        thumbnail:
          type: file
          example: file
        endTime:
          type: string
          example: 13:00
        instituteId:
          type: [string,null]
          example: null

    addLiveStreamRes:
      type: object
      properties:
        id:
          type: string
          example: ce9f9e25-c277-48bd-9dce-dbc77e1252f8
        title:
          type: string
          example: JS For FUN
        subscriptionPrice:
          type: string
          example: 499
        categories:
          type: string
          example: development
        description:
          type: string
          example: Learn Zero to Hero About Javascript in just 60 minutes.
        date:
          type: string
          example: 2023-01-01T00:00:00.000Z
        startTime:
          type: string
          example: 12:00:00
        endTime:
          type: string
          example: 13:00:00
        thumbnail:
          type: string
          example: http://192.168.1.151:5000/media/thumbnail/thumbnail_1678773620608.png
        userId:
          type: string
          example: 16f72343-499e-4b75-a347-714a874fafaf
        updatedAt:
          type: string
          example: 2023-03-14T06:00:20.617Z
        createdAt:
          type: string
          example: 2023-03-14T06:00:20.617Z
        is_active:
          type: [string,null]
          example: null
        is_completed:
          type: [string,null]
          example: null
        deletedAt:
          type: [string,null]
          example: null
        instituteId:
          type: [string,null]
          example: null

    subscribeLiveStreamRes:
      type: object
      properties: 
        id:
          type: string
          example: 8f2f0716-9347-4758-90a5-cae6dd4dae6a
        subscriptionPrice:
          type: string
          example: 499
        razorpay_order_id:
          type: string
          example: order_LRJdxEYDdEA978
        userId:
          type: string
          example: 57f8e71a-3d18-48cc-a9e3-b23065f5f619
        livestreamId:
          type: string
          example: 57f8e71a-3d18-48cc-a9e3-b23065f5f619
        updatedAt:
          type: string
          example: 2022-12-09T04:17:17.962Z
        createdAt:
          type: string
          example: 2022-12-09T04:17:17.962Z
        payment_id:
          type: [string, null]
          example: null
        razorpay_signature:
          type: [string, null]
          example: null
        deletedAt:
          type: [string, null]
          example: null

    getAllSubscribedUserRes:
      type: object
      properties:
        id:
          type: string
          example: 8f2f0716-9347-4758-90a5-cae6dd4dae6a
        isOnline:
          type: boolean
          example: true
        socketId:
          type: [string, null]
          example: F3eaKI1Sl5gJJhycAABL
        createdAt:
          type: string
          example: 2022-12-09T04:17:17.962Z
        updatedAt:
          type: string
          example: 2022-12-09T04:17:17.962Z
        deletedAt:
          type: [string, null]
          example: null
        livestreamId:
          type: string
          example: 57f8e71a-3d18-48cc-a9e3-b23065f5f619
        userId:
          type: string
          example: 57f8e71a-3d18-48cc-a9e3-b23065f5f619
        subscribeEventId:
          type: string
          example: 57f8e71a-3d18-48cc-a9e3-b23065f5f619
        User:
          $ref: '#/components/schemas/getSubscriberUserData'
    
    getSubscriberUserData:
      type: object
      properties:
        id: 
          type: string
          example: 8f2f0716-9347-4758-90a5-cae6dd4dae6a
        fullName:
          type: string
          example: John Doe
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: Doe
        email:
          type: string
          example: johndoe@example.com
    CourseType:
      type: object
      properties:
        id:
          type: string
          example: 8f2f0716-9347-4758-90a5-cae6dd4dae6a
        course_type:
          type: string
          example: development
        userId:
          type: string
          example: 57f8e71a-3d18-48cc-a9e3-b23065f5f619
        createdAt:
          type: string
          example: 2022-12-09T04:17:17.962Z
        updatedAt:
          type: string
          example: 2022-12-09T04:17:17.962Z
        deletedAt:
          type: [string, null]
          example: null

    leaveTypeRes:
      type: object
      properties:
        id:
          type: string
          example: 8f2f0716-9347-4758-90a5-cae6dd4dae6a
        leaveName:
          type: string
          example: Sick Leave
        leaveDescription:
          type: string
          example: Sick Leave
        type:
          type: string
          example: Sick
        updatedAt:
          type: string
          example: 2022-12-09T04:17:17.962Z
        createdAt:
          type: string
          example: 2022-12-09T04:17:17.962Z
        deletedAt:
          type: [string, null]
          example: null
    
    leaveTypeReq:
      type: object
      properties:
        leaveName:
          type: string
          example: Sick Leave
        leaveDescription:
          type: string
          example: Sick Leave
        type:
          type: string
          example: Sick
      
    instructorLeavesRes:
      type: object
      properties:
        id:
          type: string
          example: 8f2f0716-9347-4758-90a5-cae6dd4dae6a
        leaveCount:
          type: number
          example: 5
        createdAt:
          type: string
          example: 2022-12-09T04:17:17.962Z
        updatedAt:
          type: string
          example: 2022-12-09T04:17:17.962Z
        deletedAt:
          type: [string, null]
          example: null
        instituteInstructorId:
          type: string
          example: 57f8e71a-3d18-48cc-a9e3-b23065f5f619
        leaveTypeId:
          type: string
          example: 57f8e71a-3d18-48cc-a9e3-b23065f5f619
        LeaveType:
          $ref: '#/components/schemas/leaveTypeRes'
        InstituteInstructor:
          $ref: '#/components/schemas/instituteInstructorRes'

    instituteInstructorRes:
      type: object
      properties:
        id:
          type: string
          example: 8f2f0716-9347-4758-90a5-cae6dd4dae6a
        Instructor:
          $ref: '#/components/schemas/instructorRes'
    
    instructorRes:
      type: object
      properties:
        fullName:
          type: string
          example: John Doe
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: Doe

    instructorLeavesReq:
      type: object
      properties:
        leaveCount:
          type: number
          example: 5
        instituteInstructorId:
          type: string
          example: 57f8e71a-3d18-48cc-a9e3-b23065f5f619
        leaveTypeId:
          type: string
          example: 57f8e71a-3d18-48cc-a9e3-b23065f5f619

    addinstructorLeavesRes:
      type: object
      properties:
        id:
          type: string
          example: 8f2f0716-9347-4758-90a5-cae6dd4dae6a
        leaveCount:
          type: number
          example: 5
        createdAt:
          type: string
          example: 2022-12-09T04:17:17.962Z
        updatedAt:
          type: string
          example: 2022-12-09T04:17:17.962Z
        deletedAt:
          type: [string, null]
          example: null
        instituteInstructorId:
          type: string
          example: 57f8e71a-3d18-48cc-a9e3-b23065f5f619
        leaveTypeId:
          type: string
          example: 57f8e71a-3d18-48cc-a9e3-b23065f5f619

    adminLeaveRes:
      type: object
      properties:
        id:
          type: string
          example: 8f2f0716-9347-4758-90a5-cae6dd4dae6a
        date:
          type: string
          example: 2022-12-09
        leaveReason:
          type: string
          example: Medical CheckUp
        isApproved:
          type: string
          example: Pending
        createdAt:
          type: string
          example: 2022-12-09T04:17:17.962Z
        updatedAt:
          type: string
          example: 2022-12-09T04:17:17.962Z
        deletedAt:
          type: [string, null]
          example: null
        leaveTypeId:
          type: string
          example: 57f8e71a-3d18-48cc-a9e3-b23065f5f619
        livestreamId:
          type: string
          example: 57f8e71a-3d18-48cc-a9e3-b23065f5f619
        userId:
          type: string
          example: 57f8e71a-3d18-48cc-a9e3-b23065f5f619
        User:
          $ref: '#/components/schemas/userRes'
        LiveStream:
          $ref: '#/components/schemas/liveStreamRes'
        LeaveType:
          $ref: '#/components/schemas/leaveTypeRes'
    userRes:
      type: object
      properties:
        id:
          type: string
          example: 8f2f0716-9347-4758-90a5-cae6dd4dae6a
        fullName:
          type: string
          example: John Doe
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: Doe
        email:
          type: string
          example: johndoe@example.com 
    liveStreamRes:
      type: object
      properties:
        id:
          type: string
          example: 8f2f0716-9347-4758-90a5-cae6dd4dae6a
        title:
          type: string
          example: Live Stream 1
    leaveReq:
      type: object
      properties:
        date:
          type: string
          example: 2022-12-09
        leaveReason:
          type: string
          example: Medical CheckUp
        leaveTypeId:
          type: string
          example: 57f8e71a-3d18-48cc-a9e3-b23065f5f619
        livestreamId:
          type: string
          example: 57f8e71a-3d18-48cc-a9e3-b23065f5f619
          
    addLeaveRes:
      type: object
      properties:
        id:
          type: string
          example: 8f2f0716-9347-4758-90a5-cae6dd4dae6a
        isApproved:
          type: string
          example: Pending
        date:
          type: string
          example: 2022-12-09
        leaveReason:
          type: string
          example: Medical CheckUp
        leaveTypeId:
          type: string
          example: 57f8e71a-3d18-48cc-a9e3-b23065f5f619
        userId:
          type: string
          example: 57f8e71a-3d18-48cc-a9e3-b23065f5f619
        updatedAt:
          type: string
          example: 2022-12-09T04:17:17.962Z
        createdAt:
          type: string
          example: 2022-12-09T04:17:17.962Z
        deletedAt:
          type: [string, null]
          example: null
    LeaveRes:
      type: object
      properties:
        id:
          type: string
          example: 8f2f0716-9347-4758-90a5-cae6dd4dae6a
        isApproved:
          type: string
          example: Pending
        date:
          type: string
          example: 2022-12-09
        leaveReason:
          type: string
          example: Medical CheckUp
        leaveTypeId:
          type: string
          example: 57f8e71a-3d18-48cc-a9e3-b23065f5f619
        userId:
          type: string
          example: 57f8e71a-3d18-48cc-a9e3-b23065f5f619
        updatedAt:
          type: string
          example: 2022-12-09T04:17:17.962Z
        createdAt:
          type: string
          example: 2022-12-09T04:17:17.962Z
        deletedAt:
          type: [string, null]
          example: null
        User:
          $ref: '#/components/schemas/userRes'

    holidayListRes:
      type: object
      properties:
        id: 
          type: string
          example: 8f2f0716-9347-4758-90a5-cae6dd4dae6a
        name:
          type: string
          example: Christmas
        description:
          type: string
          example: Christmas Holiday
        type:
          type: string
          example: Public Holiday
    
    holidayListFullRes:
      type: object
      properties:
        id: 
          type: string
          example: 8f2f0716-9347-4758-90a5-cae6dd4dae6a
        name:
          type: string
          example: Christmas
        description:
          type: string
          example: Christmas Holiday
        type:
          type: string
          example: Public Holiday
        createdAt:
          type: string
          example: 2022-12-09T04:17:17.962Z
        updatedAt:
          type: string
          example: 2022-12-09T04:17:17.962Z
        deletedAt:
          type: [string, null]
          example: null

    holidayListReq:
      type: object
      properties:
        name:
          type: string
          example: Christmas
        description:
          type: string
          example: Christmas Holiday
        type:
          type: string
          example: Public Holiday

    holidayRes:
      type: object
      properties:
        id: 
          type: string
          example: 8f2f0716-9347-4758-90a5-cae6dd4dae6a
        date:
          type: string
          example: 2022-12-09
        holidayList:
          $ref: '#/components/schemas/holidayListRes'
    holidayReq:
      type: object
      properties:
        date:
          type: string
          example: 2022-12-09
        holidayListId:
          type: string
          example: 8f2f0716-9347-4758-90a5-cae6dd4dae6a

    holidayFullRes:
      type: object
      properties:
        id: 
          type: string
          example: 8f2f0716-9347-4758-90a5-cae6dd4dae6a
        date:
          type: string
          example: 2022-12-09
        holidayListId:
          type: string
          example: 8f2f0716-9347-4758-90a5-cae6dd4dae6a
        instituteId:
          type: string
          example: 8f2f0716-9347-4758-90a5-cae6dd4dae6a
        createdAt:
          type: string
          example: 2022-12-09T04:17:17.962Z
        updatedAt:
          type: string
          example: 2022-12-09T04:17:17.962Z
        deletedAt:
          type: [string, null]
          example: null




        
        
    
      


        
          
